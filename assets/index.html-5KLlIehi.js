import{_ as o,c as g,b as a,e as l,w as e,r as n,o as c,a as s}from"./app-D7KDYWdB.js";const y={};function A(m,i){const k=n("Badge"),d=n("RepoCard"),p=n("VPIcon"),r=n("CodeTabs");return c(),g("div",null,[a(k,{text:"NodeJS 18+"}),a(d,{repo:"pillarjs/path-to-regexp"}),i[6]||(i[6]=l('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p><a href="https://github.com/pillarjs/path-to-regexp" class="read-more" target="_blank" rel="noopener noreferrer"><strong>path-to-regexp</strong> 官方文档</a></p><p>将路径字符串，如 <code>/user/:name</code>，转换为正则表达式。</p><p>此模块是 <code>Express</code> 的基础依赖，可以用于 Node.js 中的路由匹配等场景。</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2>',5)),a(r,{id:"0",data:[{id:"npm"},{id:"pnpm"},{id:"yarn"}],"tab-id":"npm-to-npm-pnpm-yarn"},{title0:e(({value:t,isActive:h})=>[a(p,{provider:"iconify",name:"logos:npm-icon"}),i[0]||(i[0]=s("span",null,"npm",-1))]),title1:e(({value:t,isActive:h})=>[a(p,{provider:"iconify",name:"vscode-icons:file-type-light-pnpm"}),i[1]||(i[1]=s("span",null,"pnpm",-1))]),title2:e(({value:t,isActive:h})=>[a(p,{provider:"iconify",name:"vscode-icons:file-type-yarn"}),i[2]||(i[2]=s("span",null,"yarn",-1))]),tab0:e(({value:t,isActive:h})=>[...i[3]||(i[3]=[s("div",{class:"language-sh","data-highlighter":"shiki","data-ext":"sh",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[s("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[s("code",{class:"language-sh"},[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"npm"),s("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," install"),s("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," path-to-regexp")])])])],-1)])]),tab1:e(({value:t,isActive:h})=>[...i[4]||(i[4]=[s("div",{class:"language-sh","data-highlighter":"shiki","data-ext":"sh",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[s("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[s("code",{class:"language-sh"},[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"pnpm"),s("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," add"),s("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," path-to-regexp")])])])],-1)])]),tab2:e(({value:t,isActive:h})=>[...i[5]||(i[5]=[s("div",{class:"language-sh","data-highlighter":"shiki","data-ext":"sh",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[s("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[s("code",{class:"language-sh"},[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"yarn"),s("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," add"),s("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," path-to-regexp")])])])],-1)])]),_:1}),i[7]||(i[7]=l(`<h2 id="路径规则" tabindex="-1"><a class="header-anchor" href="#路径规则"><span>路径规则</span></a></h2><div class="hint-container warning"><p class="hint-container-title"><code>v6</code> 和 <code>v8</code></p><p>最新的 <code>v8</code> 版本和 旧版本 <code>v6</code> 在路径规则上差异较大，废弃了很多参数规则。</p><p>此处仅介绍 <code>v8</code> 的路径规则</p></div><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h3><p>在 <code>/user/:name</code> 中， <code>:name</code> 表示为一个参数，它可以匹配 <code>/user/mark</code> 这样的路径。 被匹配的参数可以通过 <code>params</code> 获取到，解析为 <code>{ params: { name: &#39;mark&#39; } }</code></p><p><code>/:foo/:bar</code> 表示两个参数，可以匹配 <code>/foo/bar</code> 这样的路径，解析为 <code>{ params: { foo: &#39;foo&#39;, bar: &#39;bar&#39; } }</code></p><h3 id="通配符" tabindex="-1"><a class="header-anchor" href="#通配符"><span>通配符</span></a></h3><p>通配符参数可匹配跨多个段的一个或多个字符。其定义方式与常规参数相同，但需以星号（*foo）作为前缀。</p><p>比如 <code>/*splat</code> 可以匹配 <code>/foo/bar</code> 这样的路径，解析为 <code>{ params: { splat: [&#39;foo&#39;, &#39;bar&#39;] } }</code></p><p>通常情况下，通配符参数应该在最后，因为匹配结果的优先级是从左到右的。</p><h3 id="可选部分" tabindex="-1"><a class="header-anchor" href="#可选部分"><span>可选部分</span></a></h3><p>大括号可用于定义路径中可选的部分。</p><p><strong>可选部分不只指参数可选，路径中的任何部分都可以被定义为可选。</strong></p><p>比如 <code>/user{/:id}/delete</code> 可以匹配 <code>/user/delete</code> 和 <code>/user/123/delete</code> 这样的路径:</p><ul><li><code>/user/delete</code> 解析为 <code>{ params: {} }</code></li><li><code>/user/123/delete</code> 解析为 <code>{ params: { id: &#39;123&#39; } }</code></li></ul><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-ts"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> compile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> match</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> parse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pathToRegexp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> stringify</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">path-to-regexp</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span></code></pre></div><h3 id="路径匹配" tabindex="-1"><a class="header-anchor" href="#路径匹配"><span>路径匹配</span></a></h3><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-ts"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 创建匹配函数</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">matchFn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> match</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/user/:id</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">matchFn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/user/123</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // { path: &#39;/user/:id&#39;, params: { id: &#39;123&#39; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">matchFn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/u/abc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 不匹配则返回 false</span></span></code></pre></div><h3 id="路径正则表达式" tabindex="-1"><a class="header-anchor" href="#路径正则表达式"><span>路径正则表达式</span></a></h3><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-ts"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> regexp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> keys</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> pathToRegexp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/user/:id</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> regexp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">exec</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/user/123</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // [&#39;/user/123&#39;, &#39;123&#39;]</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 执行正则表达式，匹配参数顺序保存在 keys 中</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">keys</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // [{ type: &#39;param&#39;, name: &#39;id&#39; }]</span></span></code></pre></div><h3 id="compiler" tabindex="-1"><a class="header-anchor" href="#compiler"><span>compiler</span></a></h3><p><code>compiler(path)</code> 是反向的 <code>pathToRegexp</code>，可以将 路径规则 + 参数 转换为路径字符串</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-ts"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">toPath</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> compile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/user/:id</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toPath</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({ </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">name</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> })</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // =&gt; &quot;/user/name&quot;</span></span></code></pre></div>`,23))])}const D=o(y,[["render",A]]),B=JSON.parse('{"path":"/fe-oss/path-to-regexp/","title":"path-to-regexp","lang":"zh-CN","frontmatter":{"title":"path-to-regexp","createTime":"2024/11/20 15:31:05","permalink":"/fe-oss/path-to-regexp/","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"path-to-regexp\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-07T17:39:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pengzhanbo.cn/fe-oss/path-to-regexp/"}],["meta",{"property":"og:site_name","content":"鹏展博"}],["meta",{"property":"og:title","content":"path-to-regexp"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-07T17:39:39.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-07T17:39:39.000Z"}]]},"readingTime":{"minutes":1.73,"words":520},"git":{"createdTime":1750608045000,"updatedTime":1759858779000,"contributors":[{"name":"pengzhanbo","username":"pengzhanbo","email":"volodymyr@foxmail.com","commits":2,"avatar":"https://avatars.githubusercontent.com/pengzhanbo?v=4","url":"https://github.com/pengzhanbo"}]},"filePathRelative":"开源库指南/路径处理/path-to-regexp.md","headers":[]}');export{D as comp,B as data};
