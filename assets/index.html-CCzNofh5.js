import{_ as s,c as i,e,o as t}from"./app-D7KDYWdB.js";const o={};function n(h,a){return t(),i("div",null,[...a[0]||(a[0]=[e(`<h2 id="包管理器" tabindex="-1"><a class="header-anchor" href="#包管理器"><span>包管理器</span></a></h2><p><code>cargo</code> 是 <code>rust</code> 的包管理工具。在安装 <code>rustup</code> 时已经一并安装完成，可直接使用。 <code>cargo</code> 提供了一系列的工具，从项目的建立、构建、测试、运行、到部署，为 <code>rust</code> 项目提供了尽可能完善的工具。</p><h2 id="cargo-toml" tabindex="-1"><a class="header-anchor" href="#cargo-toml"><span>Cargo.toml</span></a></h2><p><code>Cargo.toml</code> 是 <code>cargo</code> 特有的项目数据描述文件。它存储了项目的所有元配置信息，如果 <code>Rust</code> 开发者希望 <code>Rust</code> 项目能够按照期望的方式进行构建、测试和运行，那么，必须按照合理的方式构建 <code>Cargo.toml</code>。</p><h3 id="package-配置" tabindex="-1"><a class="header-anchor" href="#package-配置"><span>package 配置</span></a></h3><p>package 中记录了项目的描述信息</p><div class="language-toml" data-highlighter="shiki" data-ext="toml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-toml"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">package</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">package_name</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 项目名称</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">0.1.0</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 版本号</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">edition</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">2021</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # rust 版本</span></span></code></pre></div><h3 id="项目依赖" tabindex="-1"><a class="header-anchor" href="#项目依赖"><span>项目依赖</span></a></h3><p>在 <code>Cargo.toml</code> 中，主要通过各种依赖段落来描述该项目的各种依赖项： 基于 Rust 官方仓库 <a href="https://crates.io" target="_blank" rel="noopener noreferrer">crates.io</a>，通过版本说明来描述 基于项目源代码的 git 仓库地址，通过 URL 来描述 基于本地项目的绝对路径或者相对路径，通过类 Unix 模式的路径来描述</p><div class="language-toml" data-highlighter="shiki" data-ext="toml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-toml"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">dependencies</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">rand</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">0.3</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">hammer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">0.5.0</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">color</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> git</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">https://github.com/bjz/color-rs</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">geometry</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">crates/geometry</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span></code></pre></div><h2 id="cargo-lock" tabindex="-1"><a class="header-anchor" href="#cargo-lock"><span>Cargo.lock</span></a></h2><p><code>Cargo.lock</code> 文件是 <code>cargo</code> 工具根据同一项目的 toml文件生成的项目依赖详细清单，因此我们一般不用修改它</p><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h2><p><a href="https://doc.rust-lang.org/stable/cargo/commands/index.html" target="_blank" rel="noopener noreferrer">官方文档</a></p><h3 id="cargo-new-package-name-options" tabindex="-1"><a class="header-anchor" href="#cargo-new-package-name-options"><span><code>cargo new &lt;package-name&gt; [options]</code></span></a></h3><p>创建一个新的 rust 项目。</p><p><code>package-name</code> ： 包名</p><p><code>options</code>:</p><ul><li><code>--bin</code> 创建一个 bin 类型的可运行的项目，默认类型</li><li><code>--lib</code> 创建一个 lib 类型的依赖库项目</li><li><code>--edition [eidtion]</code> 指定要使用的 rust 版本，默认为 2021。可选值包括：2015, 2018, 2021</li><li><code>--name [name]</code> 设置项目名称。默认为 目录名</li><li><code>--vcs [vcs]</code> 设置使用的版本管理工具，默认为 git。可选值为：git, hg, pijul, fossil</li><li><code>--registory [registory]</code> 设置源</li></ul><p><strong>示例:</strong></p><div class="language-sh" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cargo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> new</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> new_package</span></span></code></pre></div><h3 id="cargo-init-options" tabindex="-1"><a class="header-anchor" href="#cargo-init-options"><span><code>cargo init [options]</code></span></a></h3><p>与 <code>cargo new</code> 命令类似，但是是在当前目录中初始化创建一个 <code>rust</code> 项目。</p><p><code>options</code> 与 <code>cargo new</code> 命令相同。</p><h3 id="cargo-run-options-—-args" tabindex="-1"><a class="header-anchor" href="#cargo-run-options-—-args"><span><code>cargo run [options] [— args]</code></span></a></h3><p>运行一个 <code>bin</code> 类型或 <code>example</code> 的本地 <code>rust package</code>。</p><p><code>run</code> 命令是编译速度优先，不会对代码进行优化，牺牲了运行速度，换取 package 尽快编译完成然后启动，适合在开发时进行调试时使用。</p><p><code>--</code> ： 分隔命令行参数，<code>—</code> 后面的参数会传递给当前运行的 <code>package</code></p><p><code>options</code> (常用):</p><ul><li><code>--release, -r</code> 编译为<code>release</code>版本</li><li><code>--profile [name]</code> 获取调试信息</li></ul><h3 id="cargo-build" tabindex="-1"><a class="header-anchor" href="#cargo-build"><span><code>cargo build</code></span></a></h3><p>编译 当前 <code>package，以及它的所有依赖库</code> 。</p><h3 id="cargo-check" tabindex="-1"><a class="header-anchor" href="#cargo-check"><span><code>cargo check</code></span></a></h3><p>快速检查当前代码是否能够编译通过</p><h3 id="cargo-add" tabindex="-1"><a class="header-anchor" href="#cargo-add"><span>cargo add</span></a></h3><p>添加新的 依赖库 到 <code>Cargo.toml manifest file</code></p><ul><li><code>cargo add [options] crate...</code> 从 <a href="https://crate.io" target="_blank" rel="noopener noreferrer">crate.io</a> 安装指定的依赖库</li><li><code>crate@version</code> 添加指定版本的 依赖库</li><li><code>cargo add [options] --path path</code> 从指定的 <code>path</code> 安装依赖库</li><li><code>cargo add [options] --git git</code> 从 指定的 <code>git</code> 地址 安装依赖库</li></ul>`,37)])])}const p=s(o,[["render",n]]),l=JSON.parse('{"path":"/learn-rust/cargo/","title":"Cargo","lang":"zh-CN","frontmatter":{"title":"Cargo","createTime":"2022/06/02 05:14:57","permalink":"/learn-rust/cargo/","description":"包管理器 cargo 是 rust 的包管理工具。在安装 rustup 时已经一并安装完成，可直接使用。 cargo 提供了一系列的工具，从项目的建立、构建、测试、运行、到部署，为 rust 项目提供了尽可能完善的工具。 Cargo.toml Cargo.toml 是 cargo 特有的项目数据描述文件。它存储了项目的所有元配置信息，如果 Rust 开...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Cargo\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-07T17:39:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pengzhanbo.cn/learn-rust/cargo/"}],["meta",{"property":"og:site_name","content":"鹏展博"}],["meta",{"property":"og:title","content":"Cargo"}],["meta",{"property":"og:description","content":"包管理器 cargo 是 rust 的包管理工具。在安装 rustup 时已经一并安装完成，可直接使用。 cargo 提供了一系列的工具，从项目的建立、构建、测试、运行、到部署，为 rust 项目提供了尽可能完善的工具。 Cargo.toml Cargo.toml 是 cargo 特有的项目数据描述文件。它存储了项目的所有元配置信息，如果 Rust 开..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-07T17:39:39.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-07T17:39:39.000Z"}]]},"readingTime":{"minutes":2.42,"words":727},"git":{"createdTime":1677713757000,"updatedTime":1759858779000,"contributors":[{"name":"pengzhanbo","username":"pengzhanbo","email":"volodymyr@foxmail.com","commits":8,"avatar":"https://avatars.githubusercontent.com/pengzhanbo?v=4","url":"https://github.com/pengzhanbo"}]},"autoDesc":true,"filePathRelative":"rust学习简记/环境准备/Cargo.md","headers":[]}');export{p as comp,l as data};
