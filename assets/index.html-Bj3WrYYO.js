import{_ as e,c as l,e as a,b as n,a as t,r as h,o as r}from"./app-D7KDYWdB.js";const p={};function k(d,i){const s=h("Mermaid");return r(),l("div",null,[i[0]||(i[0]=a('<h2 id="核心概念回顾" tabindex="-1"><a class="header-anchor" href="#核心概念回顾"><span>核心概念回顾</span></a></h2><p>在深入渲染流程前，先回顾 Fiber 架构的三个核心模块：</p><ul><li><strong>Scheduler（调度器）</strong>：基于任务优先级调度任务执行顺序</li><li><strong>Reconciler（协调器）</strong>：计算新旧虚拟 DOM 树的差异</li><li><strong>Renderer（渲染器）</strong>：将更新后的虚拟 DOM 转换为实际 UI</li></ul><p>这三个模块共同构成了 React 高效灵活的渲染机制。下面通过完整渲染流程解析它们如何协同工作。</p><h2 id="整体渲染流程概述" tabindex="-1"><a class="header-anchor" href="#整体渲染流程概述"><span>整体渲染流程概述</span></a></h2><p>React 渲染流程分为两个关键阶段：</p>',6)),n(s,{code:"eJxLL0osyFDwCeJSAALH6ODkjNSU0pzUolgFXV07BafooNTk/LzkTJAIWIkTWNwZKJ6XkloEEy0uqcxJVXBUSMvMybFSTrJINUgy1CkuKcrPTrVSNrawcDV2RlLnBFWXaJxsmGoAV2doaW7mYoSkzhmqLtU41dAkBa7OzdTc2cCACwAB5jYW"}),i[1]||(i[1]=a(`<ol><li><strong>Render 阶段（协调阶段）</strong>：Reconciler 负责调用组件渲染方法，构建 Fiber 树</li><li><strong>Commit 阶段（渲染阶段）</strong>：Renderer 将变更同步应用到真实 DOM</li></ol><h3 id="示例场景分析" tabindex="-1"><a class="header-anchor" href="#示例场景分析"><span>示例场景分析</span></a></h3><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-jsx"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> default</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> CounterApp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> setCount</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> increment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> setCount</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">prev</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> prev</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> className</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">counter</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">h3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        当前计数:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">h3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">={</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">increment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">增加</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  )</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当用户点击按钮触发状态更新时：</p><ol><li>Scheduler 接收更新任务并调度执行</li><li>Reconciler 计算变更并标记需要更新的部分</li><li>Renderer 将变更同步应用到真实 DOM</li></ol>`,5)),n(s,{code:"eJx1kctKw0AUhvd9igNuNCokxksV7cYqCIqg4L5JRyvGRmKCuBPvrZcuFK2XhRVrF6UXREqb1rfJTNKVr+AkE9K46GZmzvn/c843M5uKeiCnEpoOy2sRgKVB+7iFL9ogGbqupmclLSarRlqHOWD7MAhD1Lcup1DSUJA2yHHBmeNcP7ktkvsGvqyTl2/yUP/tXOPOES5dOfUTbH66Do58Fchrhurdct5+PrU6eXx2aZuloIJks2zenLcOC5b5Ybef1pCspuVtd5QL0QspRUjrg+FUC3b1kYUeRkqM8YBzeZqymibQUADcapDMndXMkrcLp1oHYy+Z0BFDcgXznAkUGzbi6i4DoyjpJNICLhZ4VH6+DxN5a5Gbqj8FWGuSKTmFa3J3Y/28+pxMoMN7PLjWwmeU1fVCfHUFWE9W5mEswehorPdTNLNvSFtaYi8F3ecceWzgXM1qF533stWskIdK+Fu90t6TUole5N+T+w52vYjbXD9UUKjD5raizAxIUcRLwsi+rqk7aGZAjEYXxPnAHWrH7AlRFhAf2IXpqcn4WMjOxvlmJCJhPBmYFyem5nk+8gf+Dkx9"}),i[2]||(i[2]=a('<h2 id="调度器-scheduler-工作原理" tabindex="-1"><a class="header-anchor" href="#调度器-scheduler-工作原理"><span>调度器（Scheduler）工作原理</span></a></h2><p>Scheduler 是 React 16 引入的调度系统，核心作用是管理任务优先级和执行时机。虽然浏览器提供了 <code>requestIdleCallback</code> API，但 React 基于以下原因实现了自定义调度器：</p><ol><li><strong>浏览器兼容性问题</strong>：部分浏览器不支持 <code>requestIdleCallback</code></li><li><strong>触发频率不稳定</strong>：原生 API 受多种因素影响</li><li><strong>优先级控制需求</strong>：需要更细粒度的任务优先级管理</li></ol>',3)),n(s,{code:"eJxLy8kvT85ILCpRCHHhUgACx+iXq2c82TPjaWvH813Ln+ze/bRrYayCrq6dglP0iw3NT3ctezlj/tOO6bFg1c7RT/b2YVcNlncCs12qn+6d/LSz9+mO5c9mrH86YdmzOZ3PV+56OX3Ts+nbXk7f8n7P/FqwchegcgWgErAu1+hnnctfLOyBmopQADQArMAt+vnazqf7Wp/s6H6yowFoeCwXAF5SZhA="}),i[3]||(i[3]=a(`<p>Scheduler 采用 <strong>时间切片（Time Slicing）</strong> 技术，将任务分解为小块，在浏览器空闲时执行，避免阻塞主线程。</p><h2 id="协调器-reconciler-与-render-阶段" tabindex="-1"><a class="header-anchor" href="#协调器-reconciler-与-render-阶段"><span>协调器（Reconciler）与 Render 阶段</span></a></h2><h3 id="可中断的协调过程" tabindex="-1"><a class="header-anchor" href="#可中断的协调过程"><span>可中断的协调过程</span></a></h3><p>React 16 将协调过程从递归改为可中断的循环：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 同步模式工作循环</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> workLoopSync</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">workInProgress</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !==</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    performUnitOfWork</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">workInProgress</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 并发模式工作循环</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> workLoopConcurrent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">workInProgress</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !==</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;&amp;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">shouldYield</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    performUnitOfWork</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">workInProgress</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>workInProgress</code>：当前正在处理的 Fiber 节点</li><li><code>shouldYield()</code>：检查当前帧是否有剩余时间</li><li><code>performUnitOfWork()</code>：处理当前 Fiber 节点并连接后续节点</li></ul><h3 id="fiber-节点处理流程" tabindex="-1"><a class="header-anchor" href="#fiber-节点处理流程"><span>Fiber 节点处理流程</span></a></h3><p><code>performUnitOfWork</code> 采用深度优先遍历（DFS）策略，分为两个阶段：</p>`,8)),n(s,{code:"eJwrTi0sTc1LTnXJTEwvSszlUgCCgsSikszkzILEvBKFoPz8EgxBR4XEYoXnu1ue7N7miCHphJB0wpB0Rkg6Y0i6gCSf9m97unYCRAkXWAnICbp2do5WCkmp6Zl54flF2e/3dLxsmPR+TydYgSNQ1gmnrBNQ1hmnrDNQ1gWnrIsuRHNyfm5BTmpJKlTF071I+iGW41YBsh/o9qcTep7vWv6iq+l5086nS1qeT2iDuh0oDfIhLiMAU82puQ=="}),i[4]||(i[4]=a('<ol><li><p><strong>递阶段（beginWork）</strong>：</p><ul><li>从根节点开始深度优先遍历</li><li>为每个 Fiber 节点调用 <code>beginWork</code></li><li>创建子节点并建立连接</li><li>到达叶子节点后进入归阶段</li></ul></li><li><p><strong>归阶段（completeWork）</strong>：</p><ul><li>收集副作用（如 DOM 更新需求）</li><li>存在兄弟节点则进入兄弟节点的递阶段</li><li>不存在兄弟节点则返回父节点继续归阶段</li><li>最终回到根节点完成协调</li></ul></li></ol><div class="hint-container info"><p class="hint-container-title"><strong>设计细节</strong></p><p>Fiber 节点指向父节点的字段名为 <code>return</code> 而非 <code>parent</code>，因为从子节点角度看，完成工作后是&quot;返回&quot;到父节点继续工作。</p></div><h2 id="渲染器-renderer-与-commit-阶段" tabindex="-1"><a class="header-anchor" href="#渲染器-renderer-与-commit-阶段"><span>渲染器（Renderer）与 Commit 阶段</span></a></h2><p>当协调阶段完成，进入不可中断的 Commit 阶段。此阶段将协调结果提交到真实 DOM，分为三个子阶段：</p>',4)),n(s,{code:"eJxLy8kvT85ILCpRCHHhUgACx2jn/NzczBKFlzO2PVu3NVZBV9dOwSnaKTUtvyhVwbe0JLEkMz8vFqzWCSzpHI0q6gwWdYn2SazMLy2BiLmAxVyjn++e/Gzu/FguAEXdJrg="}),i[5]||(i[5]=a('<h3 id="_1-before-mutation-阶段-dom-操作前" tabindex="-1"><a class="header-anchor" href="#_1-before-mutation-阶段-dom-操作前"><span>1. Before Mutation 阶段（DOM 操作前）</span></a></h3><ul><li>处理 DOM 渲染/删除后的自动聚焦逻辑</li><li>调用 <code>getSnapshotBeforeUpdate</code> 生命周期</li><li>调度 <code>useEffect</code></li></ul><h3 id="_2-mutation-阶段-执行-dom-操作" tabindex="-1"><a class="header-anchor" href="#_2-mutation-阶段-执行-dom-操作"><span>2. Mutation 阶段（执行 DOM 操作）</span></a></h3><ul><li>根据协调结果执行 DOM 增删改操作</li><li>解绑旧节点的 ref 引用</li><li>执行函数组件的销毁清理函数</li></ul><h3 id="_3-layout-阶段-dom-操作后" tabindex="-1"><a class="header-anchor" href="#_3-layout-阶段-dom-操作后"><span>3. Layout 阶段（DOM 操作后）</span></a></h3><ul><li>绑定新节点的 ref 引用</li><li>调用 <code>componentDidMount</code>/<code>componentDidUpdate</code></li><li>执行 <code>useLayoutEffect</code> 回调</li></ul><h3 id="完整-commit-流程" tabindex="-1"><a class="header-anchor" href="#完整-commit-流程"><span>完整 Commit 流程</span></a></h3>',7)),n(s,{code:"eJwrTi0sTc1LTnXJTEwvSszlUgCCgsSikszkzILEvBKFoNTE5BIMURd/Xy6wIFha184OKGCl4JSall+UquBbWpJYkpmfB1bgl1+SqpBflloEUWql8LS97emS9pcztj1bt/XZ5N4ne+dgGgQz4f2eDiBfAaLs/Z5ONBPBap+um/dyZiuQ+Wz2lmfTNmAa5pNYmV8K8QKmY3Y0P93Y8Hz2jqetm7E4BqZqQt/z3WufLml5PqENuzmlxamuaWmpySUvNjQ/3bXs+dpOLgB5WYlG"}),i[6]||(i[6]=a('<h2 id="关键设计优势" tabindex="-1"><a class="header-anchor" href="#关键设计优势"><span>关键设计优势</span></a></h2><ol><li><p><strong>可中断渲染</strong>：</p><ul><li>Scheduler 和 Reconciler 工作可被高优先级任务中断</li><li>所有计算在内存中进行，不会显示中间状态</li></ul></li><li><p><strong>双缓存机制</strong>：</p><ul><li>内存中同时存在两棵 Fiber 树（current 和 workInProgress）</li><li>减少界面闪烁，提升用户体验</li></ul></li><li><p><strong>副作用隔离</strong>：</p><ul><li>协调阶段收集副作用（effect）</li><li>提交阶段统一执行副作用</li></ul></li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>React 的渲染流程通过精密的模块化设计实现高效渲染：</p><ol><li><strong>Scheduler</strong> 智能调度任务，优先处理用户交互</li><li><strong>Reconciler</strong> 使用可中断的 DFS 遍历计算变更</li><li><strong>Renderer</strong> 通过三阶段提交保证 DOM 更新一致性</li></ol>',5)),n(s,{code:"eJxLy8kvT85ILCpRCHHhUgACx+gnu5Y82TXpya7uJ7u3xSro6topOEUHJ2ekppTmpBbFghU5gYWdq1+unvFkz4ynrR3Pdy23rwVLOQOlFJ7NWA9W4RL9ZMfaZ9PWPt07+Wln75Pdu592LYSYAFb2dMIysDLX6KDU5Py85Ey4Ba5gcTegeF5KatHLGduerdsKkXEDy7hHO+fn5maWIMu4g2U8ol38fZ/N3vJs2oZYLgC+m1b9"}),i[7]||(i[7]=t("p",null,"这种架构使 React 能够平衡响应性和性能，在复杂应用场景下仍能保持流畅的用户体验。理解这些底层机制对于优化 React 应用性能和解决渲染相关问题至关重要。",-1))])}const c=e(p,[["render",k]]),g=JSON.parse('{"path":"/article/8kq3oe32/","title":"React 渲染机制解析：从调度到提交","lang":"zh-CN","frontmatter":{"title":"React 渲染机制解析：从调度到提交","createTime":"2025/03/15 14:18:59","permalink":"/article/8kq3oe32/","tags":["react"],"description":"核心概念回顾 在深入渲染流程前，先回顾 Fiber 架构的三个核心模块： Scheduler（调度器）：基于任务优先级调度任务执行顺序 Reconciler（协调器）：计算新旧虚拟 DOM 树的差异 Renderer（渲染器）：将更新后的虚拟 DOM 转换为实际 UI 这三个模块共同构成了 React 高效灵活的渲染机制。下面通过完整渲染流程解析它们如...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"React 渲染机制解析：从调度到提交\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-07T17:39:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pengzhanbo.cn/article/8kq3oe32/"}],["meta",{"property":"og:site_name","content":"鹏展博"}],["meta",{"property":"og:title","content":"React 渲染机制解析：从调度到提交"}],["meta",{"property":"og:description","content":"核心概念回顾 在深入渲染流程前，先回顾 Fiber 架构的三个核心模块： Scheduler（调度器）：基于任务优先级调度任务执行顺序 Reconciler（协调器）：计算新旧虚拟 DOM 树的差异 Renderer（渲染器）：将更新后的虚拟 DOM 转换为实际 UI 这三个模块共同构成了 React 高效灵活的渲染机制。下面通过完整渲染流程解析它们如..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-07T17:39:39.000Z"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:modified_time","content":"2025-10-07T17:39:39.000Z"}]]},"readingTime":{"minutes":5.18,"words":1553},"git":{"createdTime":1749986499000,"updatedTime":1759858779000,"contributors":[{"name":"pengzhanbo","username":"pengzhanbo","email":"volodymyr@foxmail.com","commits":2,"avatar":"https://avatars.githubusercontent.com/pengzhanbo?v=4","url":"https://github.com/pengzhanbo"}]},"autoDesc":true,"filePathRelative":"blog/1.前端/4.React/React渲染机制解析——从调度到提交.md","headers":[],"categoryList":[{"id":"72e6d5","sort":1,"name":"前端"},{"id":"0d0c6d","sort":4,"name":"React"}]}');export{c as comp,g as data};
