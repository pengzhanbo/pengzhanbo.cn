import{_ as i,c as a,e,o as n}from"./app-D7KDYWdB.js";const t={};function h(p,s){return n(),a("div",null,[...s[0]||(s[0]=[e(`<p>在现代前端中，SPA应用是一种主流的前端应用交互方案，其中，前端路由是实现SPA应用的关键技术之一。</p><h2 id="路由" tabindex="-1"><a class="header-anchor" href="#路由"><span>路由</span></a></h2><p><strong>路由（Router）</strong> 一般指的是 URI 中 pathname + basename + hash + query 所组成的 路径。</p><p>在前端中， <strong>路由</strong> 一般指的是 <strong>随着浏览器中的地址栏的变化，呈现不同的内容给用户</strong>。 浏览器地址栏的变化，即是 访问链接的变化，具体指的就是 pathname + basename + hash + query 部分的变化。</p><p>示例：</p><div class="language-" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/a/b</span></span>
<span class="line"><span>/a/b/#/hash</span></span>
<span class="line"><span>/a/b/#/hash?c=1</span></span></code></pre></div><p>对于前端路由，一般会选择 监听 hash 部分的变化， 或者监听 pathname 部分的变化，从而一般有两种路由模式：</p><h3 id="hash-模式" tabindex="-1"><a class="header-anchor" href="#hash-模式"><span>hash 模式</span></a></h3><p>通过监听 地址栏中 hash 部分的变化，从而呈现不同的内容。</p><div style="text-align:center;"><p><strong><a href="https://example.com/index.html" target="_blank" rel="noopener noreferrer">https://example.com/index.html</a> <mark>#/a/b/</mark></strong></p></div><p>在浏览器中，通过注册 <strong>hashchange</strong> 事件，监听 <strong>hash</strong> 变化。</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">window</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">addEventListener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hashchange</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> hash</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> window</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">location</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">hash</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">hash</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // #/a/b/</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span></span></code></pre></div><p>通过 hash 实现路由的优势在于， hash 仅依赖于浏览器，且hash的变化不会直接导致页面刷新，天然适合于实现 前端路由。</p><h3 id="history-模式" tabindex="-1"><a class="header-anchor" href="#history-模式"><span>history 模式</span></a></h3><p>通过监听 地址栏中 pathname 部分的变化，从而呈现不同的内容。</p><p>history模式是依赖于 浏览器端的 History API 而实现。 History API 允许我们对浏览器会话历史记录进行访问并操作。</p><div style="text-align:center;"><p><strong><a href="https://example.com" target="_blank" rel="noopener noreferrer">https://example.com</a> <mark>/a/b/</mark></strong></p></div><p>History API 通过 history.pushState() 和 history.replaceState() 方法，新增或者替换历史记录， 通过 popState 事件监听历史记录的变化。</p><p>直接操作历史记录的变化，结果会改变浏览器地址栏的显示内容，但不会引起浏览器刷新页面。 但是由于变化的部分一般是 <code>pathname + basename</code> 的部分，如果手动刷新页面，可能会导致浏览器通过当前路径 向服务器发起请求找不到对应的资源而返回404，所以一般需要在服务器端的HTTP服务器进行配置，将相关的路径请求资源， 都指向同一个html资源文件。</p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History_API" target="_blank" rel="noopener noreferrer">History API</a></p></blockquote><h3 id="其他模式" tabindex="-1"><a class="header-anchor" href="#其他模式"><span>其他模式</span></a></h3><p>除了上述两种一般用于浏览器端中的路由模式，为了满足其他的场景，比如 在SSR场景下，需要在服务端模拟路由在生成页面内容， 或者在 electron 桌面应用中。一般会基于 memory 实现一种 仅通过 memory 的变化的路由的模式。</p><p>在这个模式中，通过一个普通的 JavaScript 字符串或者对象，来实现模拟 路由路径地址以及相关功能。</p><h2 id="router解析" tabindex="-1"><a class="header-anchor" href="#router解析"><span>Router解析</span></a></h2><p>前端路由在不同的库或者框架中实现，一般会采用一套通用的解析规则，在实现细节上有所差异。</p><p>一个路由地址，一般包含如下几个部分：</p><ul><li><strong>path</strong> 表示路由的路径</li><li><strong>params</strong> 表示路由的路径动态匹配结果</li><li><strong>query</strong> 表示路由携带的参数，未解析前为 queryString, 解析后为 queryObject</li></ul><p>如一个 路由地址： <code>/a/b/?c=1</code> 中， <code>/a/b/</code> 部分一般称为 <strong>path</strong> ， <code>?c=1</code> 部分一般被称为 <code>query</code>。</p><h3 id="具名路由" tabindex="-1"><a class="header-anchor" href="#具名路由"><span>具名路由</span></a></h3><p>具名路由，也称 静态路由 指在声明一个路由时，对地址栏路径地址使用 全等匹配，仅当声明的路由与路径地址全等时，才命中路由。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 浏览器地址栏： https://example.com/a/b/</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 声明路由：</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> routes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/a/b</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 命中当前路由</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/a/c</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 不一致，未命中</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/a</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 不一致，未命中</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/a/b/c</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 不一致，未命中</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="路由匹配" tabindex="-1"><a class="header-anchor" href="#路由匹配"><span>路由匹配</span></a></h3><p>路由匹配，指通过 一套匹配规则，对地址栏路径地址 进行 规则匹配，当命中匹配规则时，则命中路由。 一般场景下， 通过 <code>/:pathname</code> 的格式来表示路由路径中的动态部分。</p><p>如 <code>/user/:id</code>， 则可以匹配 <code>/user/123</code>，<code>/user/456</code> 等满足规则的地址栏路径。</p><p><code>/:pathname</code> 部分会被解析到 <code>params</code> 对象中，如上述的 通过<code>/user/:id</code>规则解析 <code>/user/123</code>，表示为：</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> currentRoute</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/user/123</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  params</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 123</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h3><p>在不同的框架或库中， 对路由解析会在基于上述的规则的基础上，进行补充和扩展，提供更加丰富的功能，以满足更多的场景。</p><p>比如， <strong>Vue-Router</strong> 使用了 <code>path-to-regexp</code> 库作为其路由解析的依赖，该库提供了非常丰富且灵活的路径匹配功能， 能够适配非常多的从简单到复杂的场景。<strong>React-Router</strong> 则在其内部实现了和扩展了相关的规则。</p>`,39)])])}const r=i(t,[["render",h]]),k=JSON.parse('{"path":"/article/xhb2iacu/","title":"前端路由","lang":"zh-CN","frontmatter":{"title":"前端路由","createTime":"2019/09/13 04:13:56","tags":["javascript"],"permalink":"/article/xhb2iacu/","description":"在现代前端中，SPA应用是一种主流的前端应用交互方案，其中，前端路由是实现SPA应用的关键技术之一。 路由 路由（Router） 一般指的是 URI 中 pathname + basename + hash + query 所组成的 路径。 在前端中， 路由 一般指的是 随着浏览器中的地址栏的变化，呈现不同的内容给用户。 浏览器地址栏的变化，即是 访问...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"前端路由\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-07T17:39:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pengzhanbo.cn/article/xhb2iacu/"}],["meta",{"property":"og:site_name","content":"鹏展博"}],["meta",{"property":"og:title","content":"前端路由"}],["meta",{"property":"og:description","content":"在现代前端中，SPA应用是一种主流的前端应用交互方案，其中，前端路由是实现SPA应用的关键技术之一。 路由 路由（Router） 一般指的是 URI 中 pathname + basename + hash + query 所组成的 路径。 在前端中， 路由 一般指的是 随着浏览器中的地址栏的变化，呈现不同的内容给用户。 浏览器地址栏的变化，即是 访问..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-07T17:39:39.000Z"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:modified_time","content":"2025-10-07T17:39:39.000Z"}]]},"readingTime":{"minutes":3.9,"words":1169},"git":{"createdTime":1663026977000,"updatedTime":1759858779000,"contributors":[{"name":"pengzhanbo","username":"pengzhanbo","email":"volodymyr@foxmail.com","commits":8,"avatar":"https://avatars.githubusercontent.com/pengzhanbo?v=4","url":"https://github.com/pengzhanbo"}]},"autoDesc":true,"filePathRelative":"blog/1.前端/10.开发/前端路由.md","headers":[],"categoryList":[{"id":"72e6d5","sort":1,"name":"前端"},{"id":"90af2f","sort":10,"name":"开发"}]}');export{r as comp,k as data};
