import{_ as t,c as o,e as a,o as p}from"./app-D7KDYWdB.js";const c={};function d(i,e){return p(),o("div",null,[...e[0]||(e[0]=[a('<p>集合对象是指： <code>Set</code>、 <code>Map</code> 、<code>WeakSet</code>、 <code>WeakMap</code></p><div class="hint-container tip"><p class="hint-container-title">提问</p><p>简单介绍一下 <code>Set</code>、 <code>Map</code> 、<code>WeakSet</code>、 <code>WeakMap</code></p></div><h2 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span>Set</span></a></h2><p><code>Set</code> 对象是 值的集合，Set中的元素只会出现一次，即 Set 中的元素值是唯一的。</p><ul><li><code>Set.prototype.add()</code> 在当前实例的尾部添加一个元素，并返回当前Set实例</li><li><code>Set.prototype.clear()</code> 移除当前实例的所有元素</li><li><code>Set.prototype.delete()</code> 移除当前实例中的指定的元素</li><li><code>Set.prototype.has()</code> 判断当前实例中是否存在指定的元素</li><li><code>Set.prototype.entries()</code> 返回一个迭代器对象，该对象包含按照插入顺序排列所有元素的 <code>[value, value]</code>数组</li><li><code>Set.prototype.keys()</code> 同 <code>values()</code> 方法</li><li><code>Set.prototype.values()</code> 返回一个迭代器对象，该对象包含按照插入顺序排列的所有元素的值</li></ul><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>Map</span></a></h2><p><code>Map</code> 对象保存键值对，并且能够记住键的原始插入顺序。任何值都可以作为一个键或一个值。</p><ul><li><code>Map.prototype.set()</code> 在当前实例添加或更新一个指定的键和值的键值对</li><li><code>Map.prototype.get()</code> 返回当前实例中的一个指定元素</li><li><code>Map.prototype.has()</code> 判断当前实例中是否存在指定元素，返回 布尔值</li><li><code>Map.prototype.delete()</code> 移除当前实例中指定元素</li><li><code>Map.prototype.clear()</code> 移除当前实例所有元素</li><li><code>Map.prototype.entries()</code> 返回一个迭代器对象，该对象包含按照插入顺序排列所有元素的 <code>[key, value]</code>数组</li><li><code>Map.prototype.keys()</code> 返回一个迭代器对象，该对象包含按照插入顺序排列的所有元素的键</li><li><code>Map.prototype.values()</code> 返回一个迭代器对象，该对象包含按照插入顺序排列的所有元素的值</li></ul><h2 id="weakset" tabindex="-1"><a class="header-anchor" href="#weakset"><span>WeakSet</span></a></h2><p><code>WeakSet</code> 对象是一些对象值的集合，并且其中的每个对象值都只能出现一次，在集合中是唯一的。</p><p><code>WeakSet</code> 和 <code>Set</code> 的区别：</p><ul><li><p>与<code>Set</code> 相比，<code>WeakSet</code>只能是对象的集合，而不能是任何类型的任意值</p></li><li><p><code>WeakSet</code>集合中的对象的引用为弱引用。如果没有其他的对<code>WeakSet</code>中的对象的引用，那么这些对象会被当成垃圾回收掉。</p></li><li><p><code>WeakSet</code> 是不可枚举的。</p></li><li><p><code>WeakSet.prototype.add()</code> 在当前实例的尾部添加一个元素，并返回当前Set实例</p></li><li><p><code>WeakSet.prototype.delete()</code> 移除当前实例中的指定的元素</p></li><li><p><code>WeakSet.prototype.has()</code> 判断当前实例中是否存在指定的元素</p></li></ul><h2 id="weakmap" tabindex="-1"><a class="header-anchor" href="#weakmap"><span>WeakMap</span></a></h2><p><code>WeakMap</code> 对象是一组 键值对 的集合，其中的键是弱引用的，且键必须是对象，而值可以是任意的。</p><p><code>WeakMap</code> 和 <code>Map</code> 的区别</p><ul><li><p><code>WeakMap</code> 的键必须是对象，值可以使任意的。</p></li><li><p>由于键是弱引用的，所以当键所指对象没有其他地方引用的时候，它会被GC回收掉。</p></li><li><p><code>WeakMap</code> 是不可枚举的。</p></li><li><p><code>WeakMap.prototype.set()</code> 在当前实例添加或更新一个指定的键和值的键值对</p></li><li><p><code>WeakMap.prototype.get()</code> 返回当前实例中的一个指定元素</p></li><li><p><code>WeakMap.prototype.has()</code> 判断当前实例中是否存在指定元素，返回 布尔值</p></li><li><p><code>WeakMap.prototype.delete()</code> 移除当前实例中指定元素</p></li></ul>',16)])])}const r=t(c,[["render",d]]),n=JSON.parse('{"path":"/interview-question/oi8seb1b/","title":"集合对象","lang":"zh-CN","frontmatter":{"title":"集合对象","createTime":"2022/04/17 10:51:34","permalink":"/interview-question/oi8seb1b/","description":"集合对象是指： Set、 Map 、WeakSet、 WeakMap 提问 简单介绍一下 Set、 Map 、WeakSet、 WeakMap Set Set 对象是 值的集合，Set中的元素只会出现一次，即 Set 中的元素值是唯一的。 Set.prototype.add() 在当前实例的尾部添加一个元素，并返回当前Set实例 Set.prototy...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"集合对象\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-07T17:39:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pengzhanbo.cn/interview-question/oi8seb1b/"}],["meta",{"property":"og:site_name","content":"鹏展博"}],["meta",{"property":"og:title","content":"集合对象"}],["meta",{"property":"og:description","content":"集合对象是指： Set、 Map 、WeakSet、 WeakMap 提问 简单介绍一下 Set、 Map 、WeakSet、 WeakMap Set Set 对象是 值的集合，Set中的元素只会出现一次，即 Set 中的元素值是唯一的。 Set.prototype.add() 在当前实例的尾部添加一个元素，并返回当前Set实例 Set.prototy..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-07T17:39:39.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-07T17:39:39.000Z"}]]},"readingTime":{"minutes":2.52,"words":757},"git":{"createdTime":1650212829000,"updatedTime":1759858779000,"contributors":[{"name":"pengzhanbo","username":"pengzhanbo","email":"volodymyr@foxmail.com","commits":12,"avatar":"https://avatars.githubusercontent.com/pengzhanbo?v=4","url":"https://github.com/pengzhanbo"}]},"autoDesc":true,"filePathRelative":"面试题/JavaScript/集合对象.md","headers":[]}');export{r as comp,n as data};
