import{_ as t,c as a,e as i,o as n}from"./app-D7KDYWdB.js";const o={};function r(p,e){return n(),a("div",null,[...e[0]||(e[0]=[i('<div class="hint-container tip"><p class="hint-container-title">提问</p><ol><li>什么是跨域？</li><li>浏览器的同源策略</li><li>跨域解决方案？</li></ol></div><h2 id="跨域" tabindex="-1"><a class="header-anchor" href="#跨域"><span>跨域</span></a></h2><p>当 协议、 子域名、 主域名、 端口号 中任意一个不相同是，都算作不同域。 不同域之间相互请求资源，就被认为是 <strong>跨域</strong>。</p><h2 id="浏览器的同源策略" tabindex="-1"><a class="header-anchor" href="#浏览器的同源策略"><span>浏览器的同源策略</span></a></h2><p>同源策略是一种约定，它是浏览器最核心也是最基本的安全功能。</p><p>同源策略是指： <code>协议 + 域名 + 端口</code> 三者相同，即使两个不同的域名指向同一个IP地址，也非同源。</p><p>同源策略限制的内容有：</p><ul><li>Cookie、LocalStorage、IndexedDB 等存储性内容</li><li>DOM节点</li><li>AJAX 请求</li></ul><p>有三个标签允许跨域加载资源：</p><ul><li><code>&lt;img&gt;</code></li><li><code>&lt;link&gt;</code></li><li><code>&lt;script&gt;</code></li></ul><h2 id="跨域解决方案" tabindex="-1"><a class="header-anchor" href="#跨域解决方案"><span>跨域解决方案</span></a></h2><p>跨域问题并不是前端开发人员仅依靠浏览器和javascript就能够解决的，常常需要跟服务器、后端技术人员进行配合， 才能解决。</p><h3 id="jsonp" tabindex="-1"><a class="header-anchor" href="#jsonp"><span>jsonp</span></a></h3><p>利用<code>&lt;script&gt;</code> 标签没有跨域限制的特点，网页可以得到从其他来源动态产生的 JSON 数据。 JSONP请求一定需要对方的服务器做支持才可以。</p><h3 id="cors" tabindex="-1"><a class="header-anchor" href="#cors"><span>cors</span></a></h3><p>cors方案需要浏览器和后端同时支持。</p><p>服务端需要设置 <code>Access-Control-Allow-Origin</code> 就可以开启cors。</p><p>该属性表示哪些域名可以访问资源，如果设置了通配符则表示所有网站都可以访问资源。</p><p>浏览器端会自动进行CORS通信。</p><h3 id="代理转发" tabindex="-1"><a class="header-anchor" href="#代理转发"><span>代理转发</span></a></h3><ul><li>通过 nginx 配置一个代理服务器，反向代理 非同源域名的接口到当前域名。</li><li>服务器 中间代理。通过 服务器 代理转发非同源域名的接口。</li><li></li></ul><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h3><p>以下方法仅能解决部分场景下的跨域问题，并不是一种通用的，合适的解决方案。</p><ul><li>postMessage</li><li>websocket</li><li>window.name + iframe</li><li>location.hash + iframe</li><li>document.domain + iframe</li></ul><div class="hint-container tip"><p class="hint-container-title">说明</p><p>在工作中最常用的跨域解决方案是 CORS 和 服务器代理转发。 这两种方法是最合适和最通用的解决方案。</p></div>',25)])])}const c=t(o,[["render",r]]),s=JSON.parse('{"path":"/interview-question/kfthgdn7/","title":"跨域","lang":"zh-CN","frontmatter":{"title":"跨域","createTime":"2022/04/16 07:46:25","permalink":"/interview-question/kfthgdn7/","description":"提问 什么是跨域？ 浏览器的同源策略 跨域解决方案？ 跨域 当 协议、 子域名、 主域名、 端口号 中任意一个不相同是，都算作不同域。 不同域之间相互请求资源，就被认为是 跨域。 浏览器的同源策略 同源策略是一种约定，它是浏览器最核心也是最基本的安全功能。 同源策略是指： 协议 + 域名 + 端口 三者相同，即使两个不同的域名指向同一个IP地址，也非同...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"跨域\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-07T17:39:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pengzhanbo.cn/interview-question/kfthgdn7/"}],["meta",{"property":"og:site_name","content":"鹏展博"}],["meta",{"property":"og:title","content":"跨域"}],["meta",{"property":"og:description","content":"提问 什么是跨域？ 浏览器的同源策略 跨域解决方案？ 跨域 当 协议、 子域名、 主域名、 端口号 中任意一个不相同是，都算作不同域。 不同域之间相互请求资源，就被认为是 跨域。 浏览器的同源策略 同源策略是一种约定，它是浏览器最核心也是最基本的安全功能。 同源策略是指： 协议 + 域名 + 端口 三者相同，即使两个不同的域名指向同一个IP地址，也非同..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-07T17:39:39.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-07T17:39:39.000Z"}]]},"readingTime":{"minutes":1.77,"words":531},"git":{"createdTime":1650092923000,"updatedTime":1759858779000,"contributors":[{"name":"pengzhanbo","username":"pengzhanbo","email":"volodymyr@foxmail.com","commits":12,"avatar":"https://avatars.githubusercontent.com/pengzhanbo?v=4","url":"https://github.com/pengzhanbo"}]},"autoDesc":true,"filePathRelative":"面试题/JavaScript/跨域.md","headers":[]}');export{c as comp,s as data};
