import{_ as d,c as o,e as k,b as l,w as e,r,o as g,a as i,d as a}from"./app-D7KDYWdB.js";const c={};function y(A,s){const n=r("VPIcon"),p=r("CodeTabs");return g(),o("div",null,[s[8]||(s[8]=k(`<p>javascript模块化的发展，距今已有10个年头左右。</p><h2 id="无模块化" tabindex="-1"><a class="header-anchor" href="#无模块化"><span>无模块化</span></a></h2><p>在早期，javascript作为一门脚本语言，仅为协助表单校验等界面辅助增强，那时候的前端也比较简单， javascript不需要模块化。</p><h2 id="命名空间" tabindex="-1"><a class="header-anchor" href="#命名空间"><span>命名空间</span></a></h2><p>后来随着 javascript 需要承担更多的功能，代码量开始上升，为了避免全局命名冲突等问题，提出了使用命名空间的方案，将符合某种规则或者约定的代码，放到同一个命名空间下。 这算是 javascript模块化最早期的雏形。</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">YAHOO</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">util</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">stopPropagation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><h2 id="基本的模块化" tabindex="-1"><a class="header-anchor" href="#基本的模块化"><span>基本的模块化</span></a></h2><p>在这个时期，出现了比较清晰的模块定义，通过闭包来做模块运行空间</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 定义模块</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">YUI</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  Y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sayHello</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    Y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">DOM</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">set</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">el</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">innerHTML</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1.0.0</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> requires</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">dom</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// ...</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 使用模块</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">YUI</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">use</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  Y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sayHello</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">entry</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // &lt;div id=&quot;entry&quot;&gt;hello!&lt;/div&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="commonjs" tabindex="-1"><a class="header-anchor" href="#commonjs"><span>CommonJs</span></a></h2><p>CommonJs 其实是一个项目，其目标是为 JavaScript 在网页浏览器之外创建模块约定， 在当年 javascript 的模块化思想还在官方的讨论中， 缺乏普遍可接受形式的javascript脚本模块单元。</p><p>CommonJs规范和当时出现的NodeJs相得益彰，共同走入了开发者的实现。</p><p>但 CommonJs 其实是面向网页浏览器之外的（如NodeJs，即面向服务端的模块化规范），并不适用于浏览器端。</p><h3 id="commonjs-规范简介" tabindex="-1"><a class="header-anchor" href="#commonjs-规范简介"><span>CommonJs 规范简介</span></a></h3><p>在CommonJs 规范中， 每个文件都是一个模块，有自己的作用域，在文件中定义的变量、函数、类等，都是私有的，对其他文件不可见。</p><p>在每个模块中，有两个内部变量可以使用， <code>require</code> 和 <code>module</code></p><ul><li><code>require</code> 用于加载某个模块。</li><li><code>module</code> 表示当前模块，是一个对象。这个对象中保存了当前模块的信息。<code>exports</code> 是 <code>module</code> 上的一个属性，保存了当前模块要导出的接口或者变量，使用 <code>require</code> 加载的某个模块获取到的值就是那个模块使用 <code>exports</code> 导出的值。</li></ul>`,17)),l(p,{id:"56",data:[{id:"a.js"},{id:"b.js"}],active:1},{title0:e(({value:t,isActive:h})=>[l(n,{provider:"iconify",name:"vscode-icons:file-type-js"}),s[0]||(s[0]=i("span",null,"a.js",-1))]),title1:e(({value:t,isActive:h})=>[l(n,{provider:"iconify",name:"vscode-icons:file-type-js"}),s[1]||(s[1]=i("span",null,"b.js",-1))]),tab0:e(({value:t,isActive:h})=>[...s[2]||(s[2]=[i("div",{class:"language-js","data-highlighter":"shiki","data-ext":"js",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[i("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[i("code",{class:"language-js"},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"let"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," name"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ="),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}}," '"),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"Mark"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},"'")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"let"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," age"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ="),i("span",{style:{"--shiki-light":"#2F798A","--shiki-dark":"#4C9A91"}}," 18")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#998418","--shiki-dark":"#B8A965"}},"module"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#998418","--shiki-dark":"#B8A965"}},"exports"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"name"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ="),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," name")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#998418","--shiki-dark":"#B8A965"}},"module"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#998418","--shiki-dark":"#B8A965"}},"exports"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"getAge"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ="),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," function"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ()"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"  return"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," age")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"}")])])])],-1)])]),tab1:e(({value:t,isActive:h})=>[...s[3]||(s[3]=[i("div",{class:"language-js","data-highlighter":"shiki","data-ext":"js",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[i("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[i("code",{class:"language-js"},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"let"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," moduleA"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ="),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," require"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},"'"),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"./a.js"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},"'"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"console"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"log"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"moduleA"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"a"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")"),i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}}," // Mark")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"// 使用了未导出的变量，获取不到值")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"console"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"log"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"moduleA"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"age"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")"),i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}}," // undefined")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"console"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"log"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"moduleA"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"getAge"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"())"),i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}}," // 18")])])])],-1)])]),_:1}),s[9]||(s[9]=k(`<p>在NodeJs环境中，CommonJs的模块由于在服务器环境下，可以从本地进行加载，即 同步加载。</p><h2 id="amd、cmd" tabindex="-1"><a class="header-anchor" href="#amd、cmd"><span>AMD、CMD</span></a></h2><div class="hint-container note"><p class="hint-container-title">注释</p><p>在我的印象中， CommonJs规范 和 AMD规范 出现的时间点 相差不远。</p><p><em>AMD 早于 CommonJs。</em></p><p>按我个人理解，CMD 在当年算是从 AMD 衍生出来的一个方案。</p></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>CommonJs 和 CMD 是两种方案！不是一样的！</p></div><h3 id="amd规范" tabindex="-1"><a class="header-anchor" href="#amd规范"><span>AMD规范</span></a></h3><p>AMD规范，即 异步模块定义(<a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="noopener noreferrer">Asynchronous Module Definition</a>)。</p><p>AMD 采用 <strong>异步加载模块</strong> 的方式。</p><p>AMD规范仅定义了一个 <code>define</code> 函数，它是一个全局变量：</p><div class="language-" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>define(id?, dependencies?, factory);</span></span></code></pre></div><ul><li><code>id</code> 描述的是当前模块的标识符;</li><li><code>dependencies</code> 则是当前模块的依赖数组， 它们会在 factory工厂方法被调用前被加载并执行， 并且执行的结果必须以依赖数组定义的顺序，依此顺序作为参数传入 factory工厂方法。</li><li><code>factory</code>为模块初始化要执行的函数或者对象。如果函数返回一个值，则该值应该设置为该模块的输出值。</li></ul><h3 id="cmd规范" tabindex="-1"><a class="header-anchor" href="#cmd规范"><span>CMD规范</span></a></h3><p>CMD规范，即 公共模块定义(<a href="https://github.com/cmdjs/specification/blob/master/draft/module.md" target="_blank" rel="noopener noreferrer">Common Module Definition</a>)</p><p>CMD规范 定义了 一个 <code>define</code> 函数，它是一个全局变量：</p><div class="language-" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>define(id?, dependencies?, factory);</span></span></code></pre></div><ul><li><p><code>id</code> 描述的是当前模块的标识符;</p></li><li><p><code>dependencies</code> 是当前模块的依赖数组， 他们会在 factory 工厂方法被调用前完成加载，但并不立即执行。</p></li><li><p><code>factory</code>为模块初始化要执行的函数或者对象。</p><ul><li><p>如果是一个函数，则函数接受三个参数：</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">define</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">((</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">require</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> exports</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span></span></code></pre></div><p><code>require</code> 用于同步加载并执行已经定义好的其他模块；获取模块的输出值， <code>exports</code>是<code>module.exports</code>的别名，用于导出当前模块的输出值；<code>module</code>存储了当前模块的信息。</p></li><li><p>如果是一个对象，则直接作为当前模块的输出值。</p></li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">两者的差异</p><p>AMD规范 和 CMD规范 从规范定义上来看，主要的差异为：</p><ul><li>AMD 的模块在加载后是立即执行的，并且会按照依赖顺序依次传入 factory， 而 CMD的模块在加载后并不立即执行，而是在 factory方法中，通过 <code>require</code> 方法调用执行模块获取结果；</li></ul></div><h3 id="规范的实现" tabindex="-1"><a class="header-anchor" href="#规范的实现"><span>规范的实现</span></a></h3><ul><li>AMD流行的实现库是 <a href="https://github.com/requirejs/requirejs" target="_blank" rel="noopener noreferrer">require.js</a>;</li><li>CMD流行的实现库是 <a href="https://github.com/seajs/seajs" target="_blank" rel="noopener noreferrer">sea.js</a>;</li></ul><div class="hint-container warning"><p class="hint-container-title">提示</p><p>由于在当下已经越来越少会去选择使用 <code>require.js</code> 以及 <code>sea.js</code>， 这里就不多对这两个库做介绍说明。</p></div><h2 id="nodejs前端工具链" tabindex="-1"><a class="header-anchor" href="#nodejs前端工具链"><span>NodeJs前端工具链</span></a></h2><p>得益于 NodeJs 的能力，开源社区在模块化方面又再次向前继续迈进。 特别是在推出了 <code>NPM</code> 包管理工具后，前端的工具、模块化出现了井喷式发展。</p><h3 id="grunt-gulp" tabindex="-1"><a class="header-anchor" href="#grunt-gulp"><span>grunt gulp</span></a></h3><p>既然 CommonJs 不适用于 浏览器端的一个主要原因是同步加载和异步加载之间的问题，那么借助于 <code>grunt</code> 或 <code>gulp</code> 提供的前端工具，在开发时，还是以文件一模块，然后构建时，将模块文件打包在一起，那么由于都是在同一个文件中，则模块之间的加载则可以是同步的。</p><p>在这个时期，<code>grunt</code>、<code>gulp</code> 并没有提供直接的模块化打包能力，但是在其基础上，通过插件实现了文件合并，从而能够在开发时，以 某种模块规范进行项目架构和管理，再进行打包构建。</p><h3 id="webpack-npm" tabindex="-1"><a class="header-anchor" href="#webpack-npm"><span>webpack NPM</span></a></h3><p>真正让 前端模块化得到质的飞跃的，是 NPM的推出，内置到了 NodeJS 中。</p><p>而 webpack 的出现，这块 真正意义上的 模块打包工具，配合 NPM， 让模块化越来越得以更方便的运用于应用开发中。</p><p>webpack 作为一个 模块打包器， 在内部根据 CommonJs规范实现了 模块加载器，使得应用于浏览器端的javascript代码，也能够像 Node端的 javascript代码，拥有类似甚至相同的文件组织结构。</p><p>实现了一文件一模块，模块之间通过 <code>require</code> 函数进行 访问。</p><p>而 NPM的推出与流行，在前端引入了 <code>package</code> 包的概念，模块以包的形式进行管理， 让越来越多的开发者，能够共享各自开发的模块，开发者可以通过 NPM 安装其他开发者已开发好的模块，然后通过 <code>webpack</code> 实现开发时加载这些模块。</p><p>webpack 内部实现了 不同的 模块化规范，包括 匿名函数闭包<code>iife</code>, <code>AMD</code>, <code>CMD</code>,<code>CommonJs</code>等。</p><p><code>webpack</code> 不仅将 javascript 作为模块，而是将一切资源都作为模块进行处理。</p><h3 id="其他的模块打包工具" tabindex="-1"><a class="header-anchor" href="#其他的模块打包工具"><span>其他的模块打包工具</span></a></h3><ul><li><a href="https://github.com/rollup/rollup" target="_blank" rel="noopener noreferrer">rollup</a> 轻量且快速的模块打包工具</li><li><a href="https://github.com/parcel-bundler/parcel" target="_blank" rel="noopener noreferrer">parcel</a> 零配置的开箱即用的模块打包工具</li><li><a href="https://github.com/vitejs/vite" target="_blank" rel="noopener noreferrer">vite</a> 基于rollup的前端工具</li><li>more...</li></ul><h3 id="其他包管理工具" tabindex="-1"><a class="header-anchor" href="#其他包管理工具"><span>其他包管理工具</span></a></h3><ul><li><a href="https://classic.yarnpkg.com/lang/en/" target="_blank" rel="noopener noreferrer">yarn</a></li><li><a href="https://pnpm.io/" target="_blank" rel="noopener noreferrer">pnpm</a></li><li>more...</li></ul><div class="hint-container info"><p class="hint-container-title">说明</p><p>与<code>npm</code> 对比，都是社区对于 包管理 的不同理念、不同实践 下所产生的工具。 三者互相发展，并都有各自的特色。</p></div><h2 id="es-modules" tabindex="-1"><a class="header-anchor" href="#es-modules"><span>ES Modules</span></a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules" target="_blank" rel="noopener noreferrer">ES Modules</a></p><p>随着 javascript的发展，ECMAScript将模块加载添加到了标准之中，浏览器也开始支持 模块加载。</p><p>使用 Javascript 模块依赖于 <code>import</code> 和 <code>export</code> 进行导入和导出。</p><p>在 <code>html</code> 导入 javascript模块脚本是，需要在 <code>&lt;script&gt;</code> 标签中添加 <code>type=&quot;module&quot;</code> 的属性声明</p><div class="language-html" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">module</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> src</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/moduleA.js</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre></div>`,43)),l(p,{id:"296",data:[{id:"moduleA.js"},{id:"moduleB.js"}]},{title0:e(({value:t,isActive:h})=>[l(n,{provider:"iconify",name:"vscode-icons:file-type-js"}),s[4]||(s[4]=i("span",null,"moduleA.js",-1))]),title1:e(({value:t,isActive:h})=>[l(n,{provider:"iconify",name:"vscode-icons:file-type-js"}),s[5]||(s[5]=i("span",null,"moduleB.js",-1))]),tab0:e(({value:t,isActive:h})=>[...s[6]||(s[6]=[i("div",{class:"language-js","data-highlighter":"shiki","data-ext":"js",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[i("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[i("code",{class:"language-js"},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"import"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," getAge"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},","),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," name"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," }"),i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}}," from"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}}," '"),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"./moduleB.js"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},"'")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"console"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"log"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"name"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"console"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"log"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"getAge"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"())")])])])],-1)])]),tab1:e(({value:t,isActive:h})=>[...s[7]||(s[7]=[i("div",{class:"language-js","data-highlighter":"shiki","data-ext":"js",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[i("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[i("code",{class:"language-js"},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"export"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," const"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," name"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ="),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}}," '"),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"Mark"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},"'")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"const"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," age"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ="),i("span",{style:{"--shiki-light":"#2F798A","--shiki-dark":"#4C9A91"}}," 18")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"export"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," function"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," getAge"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"()"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"  return"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," age")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"}")])])])],-1)])]),_:1}),s[10]||(s[10]=k('<h2 id="deno模块加载" tabindex="-1"><a class="header-anchor" href="#deno模块加载"><span>Deno模块加载</span></a></h2><p>Deno与 Node在模块加载上最大的差别， 就是 放弃了 项目中的<code>node_modules</code> 作为第三方包的存放目录，也抛弃了 类似于 NPM 的中心化管理的 模块管理工具。</p><p>Deno 推荐使用的是 去中心化的模块加载管理，支持直接从远程的任意站点加载提供的模块。</p><p>如从 官方的 <a href="https://deno.land/" target="_blank" rel="noopener noreferrer">deno.lang</a>，或者从 <a href="https://unpkg.com/" target="_blank" rel="noopener noreferrer">unpkg.com</a> 加载第三方模块。</p><div class="hint-container info"><p class="hint-container-title">说明</p><p>这种去中心化模块管理的模块加载方案，相对来说会比较依赖于网络环境，虽然远程的模块首次加载后也会被缓存，但进行生产部署时，往往生产服务器跟公网是隔离的，在这种情况下，就需要自建一个内部服务器作为代理，托管第三方的模块包。</p></div>',5))])}const D=d(c,[["render",y]]),u=JSON.parse('{"path":"/article/javascript-modules/","title":"javascript模块化 发展历程","lang":"zh-CN","frontmatter":{"title":"javascript模块化 发展历程","createTime":"2022/04/10 03:00:41","tags":["javascript"],"permalink":"/article/javascript-modules/","description":"javascript模块化的发展，距今已有10个年头左右。 无模块化 在早期，javascript作为一门脚本语言，仅为协助表单校验等界面辅助增强，那时候的前端也比较简单， javascript不需要模块化。 命名空间 后来随着 javascript 需要承担更多的功能，代码量开始上升，为了避免全局命名冲突等问题，提出了使用命名空间的方案，将符合某种规...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"javascript模块化 发展历程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-07T17:39:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pengzhanbo.cn/article/javascript-modules/"}],["meta",{"property":"og:site_name","content":"鹏展博"}],["meta",{"property":"og:title","content":"javascript模块化 发展历程"}],["meta",{"property":"og:description","content":"javascript模块化的发展，距今已有10个年头左右。 无模块化 在早期，javascript作为一门脚本语言，仅为协助表单校验等界面辅助增强，那时候的前端也比较简单， javascript不需要模块化。 命名空间 后来随着 javascript 需要承担更多的功能，代码量开始上升，为了避免全局命名冲突等问题，提出了使用命名空间的方案，将符合某种规..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-07T17:39:39.000Z"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:modified_time","content":"2025-10-07T17:39:39.000Z"}]]},"readingTime":{"minutes":7.4,"words":2221},"git":{"createdTime":1649626496000,"updatedTime":1759858779000,"contributors":[{"name":"pengzhanbo","username":"pengzhanbo","email":"volodymyr@foxmail.com","commits":18,"avatar":"https://avatars.githubusercontent.com/pengzhanbo?v=4","url":"https://github.com/pengzhanbo"}]},"autoDesc":true,"filePathRelative":"blog/1.前端/1.基础/javascript模块化.md","headers":[],"categoryList":[{"id":"72e6d5","sort":1,"name":"前端"},{"id":"f67703","sort":1,"name":"基础"}]}');export{D as comp,u as data};
