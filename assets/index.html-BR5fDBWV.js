import{_ as t,c as n,a as s,b as l,e as h,d as a,r as d,o as p}from"./app-D7KDYWdB.js";const r={};function k(o,i){const e=d("Mermaid");return p(),n("div",null,[i[0]||(i[0]=s("h2",{id:"什么是-mvvm-模式",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#什么是-mvvm-模式"},[s("span",null,"什么是 MVVM 模式？")])],-1)),i[1]||(i[1]=s("p",null,[s("mark",null,"MVVM（Model-View-ViewModel）"),a(" 是一种用于分离用户界面逻辑与业务逻辑的架构模式，核心是数据驱动视图。 它通过 "),s("strong",null,"ViewModel"),a(" 将 "),s("strong",null,"Model"),a(" 和 "),s("strong",null,"View"),a(" 解耦，实现双向数据绑定：")],-1)),l(e,{code:"eJx1jsEKgzAMhu8+RfBY8A2GJ6+yg9PLGBjbuAW0lbbg66+xY4yBp5Cf70v+eXG7fqGPcGsKgOFejkoNTLtSaVV9IA9sI/kZNamxfAjUfilonaEls13ESIDWwHUjj5GdDR8jCz9s41ZkW4WNNM+swWDEg5XzUFXQpAAmtobtM1wmX8td7dY1zZCAOrU4qgjcb8mnHEt6hB0JaV2UB7nNv3eKFG+lXVMn"}),i[2]||(i[2]=h(`<h3 id="model" tabindex="-1"><a class="header-anchor" href="#model"><span>Model</span></a></h3><p>数据模型（如 API 数据、业务逻辑）。</p><h3 id="view" tabindex="-1"><a class="header-anchor" href="#view"><span>View</span></a></h3><p>用户界面（DOM 元素）。</p><h3 id="viewmodel" tabindex="-1"><a class="header-anchor" href="#viewmodel"><span>ViewModel</span></a></h3><p>连接 Model 和 View 的桥梁，处理数据转换和交互逻辑。</p><h2 id="实现-mvvm-模式" tabindex="-1"><a class="header-anchor" href="#实现-mvvm-模式"><span>实现 MVVM 模式</span></a></h2><p>以 Vue.js 为例，核心机制是响应式系统和模板引擎：</p><div class="language-html" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&lt;!-- View (HTML模板) --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">app</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> v-model</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">message</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> &lt;!-- 双向绑定 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">{{ message }}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     &lt;!-- 数据渲染 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// ViewModel (Vue实例)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> vm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Vue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  el</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">#app</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello MVVM!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // Model数据</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 修改Model自动更新View</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">vm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Updated!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // &lt;p&gt;内容同步变化</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关键机制" tabindex="-1"><a class="header-anchor" href="#关键机制"><span>关键机制</span></a></h2><ul><li><p>双向数据绑定</p><p>View（如输入框）修改 → 自动更新 Model → ViewModel 通知其他依赖视图更新。</p></li><li><p>依赖追踪</p><p>Vue 通过 <code>Object.defineProperty</code>/ <code>Proxy</code> 监听数据变化，触发视图更新。</p></li><li><p>模板编译</p><p>将模板（如 <code>{{ message }}</code>）编译为虚拟 DOM，高效更新真实 DOM。</p></li></ul><h2 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h2><table><thead><tr><th>优点</th><th>说明</th></tr></thead><tbody><tr><td><strong>开发效率高</strong></td><td>自动同步数据视图，减少手动 DOM 操作（如 jQuery）。</td></tr><tr><td><strong>代码解耦</strong></td><td>View、ViewModel、Model 职责分离，便于维护。</td></tr><tr><td><strong>可测试性</strong></td><td>ViewModel 可独立测试（不依赖 UI）。</td></tr><tr><td><strong>数据驱动</strong></td><td>聚焦数据变化，而非视图操作。</td></tr></tbody></table><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h2><table><thead><tr><th>缺点</th><th>说明</th></tr></thead><tbody><tr><td><strong>学习曲线</strong></td><td>需理解响应式原理、虚拟 DOM 等概念。</td></tr><tr><td><strong>性能开销</strong></td><td>深度监听大对象或频繁更新可能影响性能（需优化）。</td></tr><tr><td><strong>过度绑定</strong></td><td>滥用双向绑定可能导致数据流混乱（推荐单向数据流）。</td></tr><tr><td><strong>黑箱化</strong></td><td>框架封装复杂，调试底层问题较困难。</td></tr></tbody></table>`,16))])}const c=t(r,[["render",k]]),m=JSON.parse('{"path":"/design-pattern/mvvm/","title":"MVVM","lang":"zh-CN","frontmatter":{"title":"MVVM","createTime":"2018/04/30 17:03:02","permalink":"/design-pattern/mvvm/","description":"什么是 MVVM 模式？ MVVM（Model-View-ViewModel） 是一种用于分离用户界面逻辑与业务逻辑的架构模式，核心是数据驱动视图。 它通过 ViewModel 将 Model 和 View 解耦，实现双向数据绑定： Model 数据模型（如 API 数据、业务逻辑）。 View 用户界面（DOM 元素）。 ViewModel 连接 M...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MVVM\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-07T17:39:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pengzhanbo.cn/design-pattern/mvvm/"}],["meta",{"property":"og:site_name","content":"鹏展博"}],["meta",{"property":"og:title","content":"MVVM"}],["meta",{"property":"og:description","content":"什么是 MVVM 模式？ MVVM（Model-View-ViewModel） 是一种用于分离用户界面逻辑与业务逻辑的架构模式，核心是数据驱动视图。 它通过 ViewModel 将 Model 和 View 解耦，实现双向数据绑定： Model 数据模型（如 API 数据、业务逻辑）。 View 用户界面（DOM 元素）。 ViewModel 连接 M..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-07T17:39:39.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-07T17:39:39.000Z"}]]},"readingTime":{"minutes":1.59,"words":477},"git":{"createdTime":1748511651000,"updatedTime":1759858779000,"contributors":[{"name":"pengzhanbo","username":"pengzhanbo","email":"volodymyr@foxmail.com","commits":2,"avatar":"https://avatars.githubusercontent.com/pengzhanbo?v=4","url":"https://github.com/pengzhanbo"}]},"autoDesc":true,"filePathRelative":"设计模式/18.MVVM.md","headers":[]}');export{c as comp,m as data};
