import{_ as n,c as i,e as a,o as e}from"./app-D7KDYWdB.js";const l={};function p(t,s){return e(),i("div",null,[...s[0]||(s[0]=[a(`<h2 id="执行上下文" tabindex="-1"><a class="header-anchor" href="#执行上下文"><span>执行上下文</span></a></h2><p>执行上下文是， <code>JavaScript</code> 代码被 <strong>解析</strong> 和 <strong>执行</strong> 时 <strong>所在环境</strong> 的抽象概念。 <code>JavaScript</code> 的任何代码都是在执行上下文中执行的。</p><h3 id="类型" tabindex="-1"><a class="header-anchor" href="#类型"><span>类型</span></a></h3><p><code>JavaScript</code> 有三种 执行上下文 类型：</p><ul><li><p><strong>全局执行上下文</strong></p><p>默认的执行上下文，或者说基础执行上下文。 任何不在函数内部的代码，都是在 全局执行上下文中。 全局上下文执行两个事情：</p><ul><li>创建一个全局的 <code>window</code>对象（在浏览器环境中）。</li><li>设置 <code>this</code> 的值等于 全局的 <code>window</code> 对象。</li></ul><p>一个程序只会有一个全局执行上下文。</p></li><li><p><strong>函数执行上下文</strong></p><p>每当函数被执行时，都会为该函数创建一个新的执行上下文。 每个函数都有它自己的执行上下文，且是在函数执行的时候进行创建。 函数上下文可以有任意多个，每当一个函数执行上下文被创建，它会按照定义的顺序，执行一系列步骤。</p></li><li><p><strong>eval函数执行上下文</strong></p><p>执行在 <code>eval</code> 函数内部的代码也会有它属于自己的执行上下文。</p></li></ul><h3 id="创建执行上下文" tabindex="-1"><a class="header-anchor" href="#创建执行上下文"><span>创建执行上下文</span></a></h3><p>创建执行上下文主要分为两个阶段： <strong>创建阶段</strong> 和 <strong>执行阶段</strong>。</p><h2 id="创建阶段" tabindex="-1"><a class="header-anchor" href="#创建阶段"><span>创建阶段</span></a></h2><p>在创建阶段，会做三件事：</p><ul><li>this 值的决定，即 This绑定</li><li>创建词法环境组件</li><li>创建变量环境组件</li></ul><h3 id="this绑定" tabindex="-1"><a class="header-anchor" href="#this绑定"><span>This绑定</span></a></h3><ul><li><p>全局执行上下文</p><p>在全局执行上下文中， <code>this</code> 的值指向全局对象。(在浏览器中， <code>this</code> 引用 <code>Window</code> 对象)。</p></li><li><p>函数执行上下文</p><p>在函数执行上下文中， <code>this</code> 的值取决于该函数是如何被调用的。如果它被一个引用对象调用，那么 <code>this</code> 会被设置成那个对象，否则 <code>this</code> 的值被设置为全局对象或者 <code>undefined</code> （在严格模式下）。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// &#39;this&#39; 引用 &#39;foo&#39;, 因为 &#39;baz&#39; 被对象 &#39;foo&#39; 调用</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">baz</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// &#39;this&#39; 指向全局 window 对象，因为没有指定引用对象</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="词法环境" tabindex="-1"><a class="header-anchor" href="#词法环境"><span>词法环境</span></a></h3><blockquote><p><a href="https://262.ecma-international.org/6.0/" target="_blank" rel="noopener noreferrer">ECMAScript 标准</a></p><p>词法环境是一种规范类型，基于 ECMAScript 代码的词法嵌套结构来定义标识符和具体变量和函数的关联。 一个词法环境由环境记录器和一个可能的引用外部词法环境的空值组成。</p></blockquote><p>词法环境是一种 <strong>持有标识符—变量映射</strong> 的结构。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这里的标识符指的是变量/函数的名字，而变量是对实际对象[包含函数类型对象]或原始数据的引用。</p></div><p>在词法环境的内部有两个组件：<strong>(1) 环境记录器</strong>和 <strong>(2) 一个外部环境的引用</strong>。</p><ul><li><strong>环境记录器</strong>是存储变量和函数声明的实际位置。</li><li><strong>外部环境的引用</strong>意味着它可以访问其父级词法环境（作用域）。</li></ul><p>词法环境有两种类型：</p><ul><li><strong>全局环境</strong>（在全局执行上下文中）是没有外部环境引用的词法环境。全局环境的外部环境引用是 <code>null</code>。它拥有内建的 Object/Array/等、在环境记录器内的原型函数（关联全局对象，比如 <code>window</code> 对象）还有任何用户定义的全局变量，并且 <code>this</code> 的值指向全局对象。</li><li>在<strong>函数环境</strong>中，函数内部用户定义的变量存储在环境记录器中。并且引用的外部环境可能是全局环境，或者任何包含此内部函数的外部函数。</li></ul><p>环境记录器也有两种类型：</p><ul><li><strong>声明式环境记录器</strong>: 存储变量、函数和参数。</li><li><strong>对象环境记录器</strong>: 用来定义出现在全局上下文中的变量和函数的关系。</li></ul><p>可以看出：</p><ul><li>在<strong>全局环境</strong>中，环境记录器是对象环境记录器。</li><li>在<strong>函数环境</strong>中，环境记录器是声明式环境记录器。</li></ul><div class="hint-container tip"><p class="hint-container-title">注意</p><p>对于<strong>函数环境</strong>，<strong>声明式环境记录器</strong>还包含了一个传递给函数的 <code>arguments</code> 对象（此对象存储索引和参数的映射）和传递给函数的参数的 <code>length</code>。</p></div><p>使用伪代码描述 词法环境，大致如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>GlobalExecutionContext = {</span></span>
<span class="line"><span>  LexicalEnvironment: {</span></span>
<span class="line"><span>    EnvironmentRecord: {</span></span>
<span class="line"><span>      Type: &quot;Object&quot;,</span></span>
<span class="line"><span>      // 在这里绑定标识符</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    outer: &lt;null&gt;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>FunctionExecutionContext = {</span></span>
<span class="line"><span>  LexicalEnvironment: {</span></span>
<span class="line"><span>    EnvironmentRecord: {</span></span>
<span class="line"><span>      Type: &quot;Declarative&quot;,</span></span>
<span class="line"><span>      // 在这里绑定标识符</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    outer: &lt;Global or outer function environment reference&gt;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变量环境" tabindex="-1"><a class="header-anchor" href="#变量环境"><span>变量环境</span></a></h3><p><strong>变量环境</strong> 同样是一个 <strong>词法环境</strong>，其环境记录器持有变量声明语句在执行上下文中创建的绑定关系。</p><p><strong>变量环境</strong> 有着上面定义的词法环境的所有属性。</p><p>在 <code>ES6</code> 中，<strong>词法环境</strong>和<strong>变量环境</strong>的一个不同就是前者被用来存储函数声明和变量（<code>let</code> 和 <code>const</code>）绑定， 而后者只用来存储 <code>var</code> 变量绑定。</p><p>示例代码：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 20</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 30</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> multiply</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> f</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  let</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> g</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 20</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> e</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> f</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> g</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> multiply</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">20</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 30</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例代码 执行上下文伪代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>GlobalExectionContext = {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ThisBinding: &lt;Global Object&gt;,</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  LexicalEnvironment: {</span></span>
<span class="line"><span>    EnvironmentRecord: {</span></span>
<span class="line"><span>      Type: &quot;Object&quot;,</span></span>
<span class="line"><span>      // 在这里绑定标识符</span></span>
<span class="line"><span>      a: &lt; uninitialized &gt;,</span></span>
<span class="line"><span>      b: &lt; uninitialized &gt;,</span></span>
<span class="line"><span>      multiply: &lt; func &gt;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    outer: &lt;null&gt;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  VariableEnvironment: {</span></span>
<span class="line"><span>    EnvironmentRecord: {</span></span>
<span class="line"><span>      Type: &quot;Object&quot;,</span></span>
<span class="line"><span>      // 在这里绑定标识符</span></span>
<span class="line"><span>      c: undefined,</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    outer: &lt;null&gt;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>FunctionExectionContext = {</span></span>
<span class="line"><span>  ThisBinding: &lt;Global Object&gt;,</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  LexicalEnvironment: {</span></span>
<span class="line"><span>    EnvironmentRecord: {</span></span>
<span class="line"><span>      Type: &quot;Declarative&quot;,</span></span>
<span class="line"><span>      // 在这里绑定标识符</span></span>
<span class="line"><span>      Arguments: {0: 20, 1: 30, length: 2},</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    outer: &lt;GlobalLexicalEnvironment&gt;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  VariableEnvironment: {</span></span>
<span class="line"><span>    EnvironmentRecord: {</span></span>
<span class="line"><span>      Type: &quot;Declarative&quot;,</span></span>
<span class="line"><span>      // 在这里绑定标识符</span></span>
<span class="line"><span>      g: undefined</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    outer: &lt;GlobalLexicalEnvironment&gt;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>只有遇到调用函数 <code>multiply</code> 时，函数执行上下文才会被创建。</p></div><p><strong>说明：</strong></p><p>可能你已经注意到 <code>let</code> 和 <code>const</code> 定义的变量并没有关联任何值，但 <code>var</code> 定义的变量被设成了 <code>undefined。</code></p><p>这是因为在创建阶段时，引擎检查代码找出变量和函数声明，虽然函数声明完全存储在环境中，但是变量最初设置为 <code>undefined</code>（<code>var</code> 情况下），或者未初始化（<code>let</code> 和 <code>const</code> 情况下）。</p><p>这就是为什么你可以在声明之前访问 <code>var</code> 定义的变量（虽然是 <code>undefined</code>），但是在声明之前访问 <code>let</code> 和 <code>const</code> 的变量会得到一个引用错误。</p><p>这就是我们说的变量声明提升。</p><h2 id="执行阶段" tabindex="-1"><a class="header-anchor" href="#执行阶段"><span>执行阶段</span></a></h2><p>在此阶段，完成对所有这些变量的分配，最后执行代码。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在执行阶段，如果 <code>JavaScript</code> 引擎不能在源码中声明的实际位置找到 <code>let</code> 变量的值，它会被赋值为 <code>undefined</code>。</p></div>`,44)])])}const r=n(l,[["render",p]]),c=JSON.parse('{"path":"/article/d12xkizf/","title":"JavaScript 进阶 三： 执行上下文","lang":"zh-CN","frontmatter":{"title":"JavaScript 进阶 三： 执行上下文","createTime":"2020/02/03 04:35:52","tags":["javascript"],"permalink":"/article/d12xkizf/","description":"执行上下文 执行上下文是， JavaScript 代码被 解析 和 执行 时 所在环境 的抽象概念。 JavaScript 的任何代码都是在执行上下文中执行的。 类型 JavaScript 有三种 执行上下文 类型： 全局执行上下文 默认的执行上下文，或者说基础执行上下文。 任何不在函数内部的代码，都是在 全局执行上下文中。 全局上下文执行两个事情： ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript 进阶 三： 执行上下文\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-20T16:35:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pengzhanbo.cn/article/d12xkizf/"}],["meta",{"property":"og:site_name","content":"鹏展博"}],["meta",{"property":"og:title","content":"JavaScript 进阶 三： 执行上下文"}],["meta",{"property":"og:description","content":"执行上下文 执行上下文是， JavaScript 代码被 解析 和 执行 时 所在环境 的抽象概念。 JavaScript 的任何代码都是在执行上下文中执行的。 类型 JavaScript 有三种 执行上下文 类型： 全局执行上下文 默认的执行上下文，或者说基础执行上下文。 任何不在函数内部的代码，都是在 全局执行上下文中。 全局上下文执行两个事情： ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-20T16:35:49.000Z"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:modified_time","content":"2025-10-20T16:35:49.000Z"}]]},"readingTime":{"minutes":5.44,"words":1633},"git":{"createdTime":1660924682000,"updatedTime":1760978149000,"contributors":[{"name":"pengzhanbo","username":"pengzhanbo","email":"volodymyr@foxmail.com","commits":10,"avatar":"https://avatars.githubusercontent.com/pengzhanbo?v=4","url":"https://github.com/pengzhanbo"}]},"autoDesc":true,"filePathRelative":"blog/1.前端/6.JavaScript/2.进阶/3.执行上下文.md","headers":[],"categoryList":[{"id":"72e6d5","sort":1,"name":"前端"},{"id":"e69382","sort":6,"name":"JavaScript"},{"id":"a17dc6","sort":2,"name":"进阶"}]}');export{r as comp,c as data};
