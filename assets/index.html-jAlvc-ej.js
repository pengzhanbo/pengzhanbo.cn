import{_ as n,c as t,e as i,b as e,r as l,o as h}from"./app-D7KDYWdB.js";const p={};function r(k,s){const a=l("Mermaid");return h(),t("div",null,[s[0]||(s[0]=i('<p><mark>发布/订阅模式</mark> 是观察者模式的一种变体。</p><div class="hint-container info"><p class="hint-container-title"><mark>发布/订阅模式</mark> 在 JavaScript 中非常常见，比如：</p><ul><li>浏览器的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget" target="_blank" rel="noopener noreferrer">事件监听系统</a></li><li>Node.js 中的 <a href="https://nodejs.org/api/events.html#events_class_eventemitter" target="_blank" rel="noopener noreferrer">EventEmitter 模块</a></li><li>自定义事件 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CustomEvent" target="_blank" rel="noopener noreferrer">CustomEvent</a></li><li><a href="hhttps://developer.mozilla.org/zh-CN/docs/Web/API/WebSockets_API" target="_blank" rel="noopener noreferrer">WebSocket 消息推送</a></li></ul></div><h2 id="什么是发布-订阅模式" tabindex="-1"><a class="header-anchor" href="#什么是发布-订阅模式"><span>什么是发布/订阅模式？</span></a></h2><p><mark>Publish/Subscribe (发布/订阅)模式</mark>，是一种行为型设计模式，用于实现对象间的解耦和事件通知机制。</p>',4)),e(a,{code:"eJxLy8kvT85ILCpRCHHhUlBwjA4oTcrJLM5ILYoFcp2iQ/ILMpP1XctS80oUnDMS8/JSc0ASztHBpUnFyUWZSRCFjgq6unYKNUpQ3QolIG0KGqkgfZpKNQpOID0QNXCNKKJumUWpChBrQOIAZd4utg=="}),s[1]||(s[1]=i(`<p>发布/订阅模式使用了一个 主题/事件通道，这个通道介于希望接收到通知（订阅者）的对象和激活时间的对象（发布者）之间。 改时间系统允许代码定义应用程序的特定事件，这些事件可以传递自定义参数，自定义参数包含订阅者所需的值。 其目的是避免订阅者和发布者之间产生依赖关系。</p><h2 id="实现-发布-订阅模式" tabindex="-1"><a class="header-anchor" href="#实现-发布-订阅模式"><span>实现 发布/订阅模式</span></a></h2><p>在 JavaScript 中，我们可以通过实现一个简单的事件系统，来实现发布/订阅模式。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-ts"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  constructor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">listeners</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> []</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 订阅</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  on</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">listener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">listeners</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">push</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">listener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 取消订阅</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  off</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">listener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">listeners</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">listeners</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">filter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">l</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> l</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !==</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> listener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 发布</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  emit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">listeners</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">forEach</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">listener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> listener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个简单的事件系统中，订阅者通过 <code>on()</code> 方法订阅它们感兴趣的事件，发布者通过 <code>emit()</code> 方法发布事件， 订阅者可以通过 <code>off()</code> 方法取消订阅。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-ts"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">on</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">click</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">clicked</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">emit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">click</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><h2 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h2><ul><li><p><strong>解耦性强</strong></p><p>发布者和订阅者无直接依赖，发布者不需要知道谁订阅了事件，订阅者也不需要知道事件是谁触发的。</p></li><li><p><strong>可扩展性高</strong></p><p>动态增减订阅者：通过 <code>on()</code> 和 <code>off()</code> 方法灵活管理订阅关系。</p></li><li><p><strong>支持广播通信</strong></p><p>一对多消息传递：一个事件可被多个订阅者同时响应。</p></li><li><p><strong>异步处理能力</strong></p><p>非阻塞通信：事件发布后，订阅者可异步处理任务。</p></li><li><p><strong>集中化管理</strong></p><p>事件中心统一调度：所有事件通过中间层（如 EventEmitter）管理，便于监控和调试。</p></li></ul><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h2><ul><li><p><strong>难以跟踪事件流</strong></p><p>隐式调用链：订阅者和发布者没有显式关联，这可能导致调试困难。</p></li><li><p><strong>性能开销</strong></p><p>大量事件分发：高频事件（如鼠标移动）可能引发性能问题。</p></li><li><p><strong>事件命名冲突</strong></p><p>全局事件名重复：多人协作时，可能因事件名相同导致意外覆盖。</p></li><li><p><strong>过度使用导致逻辑分散</strong></p><p>逻辑碎片化：过度依赖事件通信会让业务逻辑分散到多个订阅者中，破坏代码内聚性。</p></li></ul><h2 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h2><table><thead><tr><th><strong>适用场景</strong></th><th><strong>不适用场景</strong></th></tr></thead><tbody><tr><td>跨层级/模块通信（如微前端、跨组件通信）</td><td>简单父子组件通信（优先用 Props/Events）</td></tr><tr><td>需要广播或一对多通信（如实时通知、日志广播）</td><td>高频、高性能敏感操作（如游戏循环）</td></tr><tr><td>动态插件系统或可扩展架构</td><td>强依赖顺序的逻辑（需明确调用链）</td></tr><tr><td>异步任务协调（如文件上传完成后的多步骤处理）</td><td>需要严格类型检查的场景（需结合 TypeScript）</td></tr></tbody></table><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h2><ul><li><strong>严格管理订阅生命周期</strong></li><li><strong>使用命名空间或类型约束</strong>：避免事件名冲突</li><li><strong>控制事件粒度</strong>：避免过度细化或粗粒度的事件设计</li><li><strong>结合其他模式</strong>：如与观察者模式、状态模式混合使用</li><li><strong>性能监控</strong>：对高频事件进行性能分析，必要时优化或替换方案</li></ul>`,14))])}const g=n(p,[["render",r]]),o=JSON.parse('{"path":"/design-pattern/publish-subscribe/","title":"发布/订阅模式","lang":"zh-CN","frontmatter":{"title":"发布/订阅模式","createTime":"2018/04/21 19:55:15","permalink":"/design-pattern/publish-subscribe/","tags":["设计模式"],"description":"发布/订阅模式 是观察者模式的一种变体。 发布/订阅模式 在 JavaScript 中非常常见，比如： 浏览器的 事件监听系统 Node.js 中的 EventEmitter 模块 自定义事件 CustomEvent WebSocket 消息推送 什么是发布/订阅模式？ Publish/Subscribe (发布/订阅)模式，是一种行为型设计模式，用于...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"发布/订阅模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-07T17:39:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pengzhanbo.cn/design-pattern/publish-subscribe/"}],["meta",{"property":"og:site_name","content":"鹏展博"}],["meta",{"property":"og:title","content":"发布/订阅模式"}],["meta",{"property":"og:description","content":"发布/订阅模式 是观察者模式的一种变体。 发布/订阅模式 在 JavaScript 中非常常见，比如： 浏览器的 事件监听系统 Node.js 中的 EventEmitter 模块 自定义事件 CustomEvent WebSocket 消息推送 什么是发布/订阅模式？ Publish/Subscribe (发布/订阅)模式，是一种行为型设计模式，用于..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-07T17:39:39.000Z"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:modified_time","content":"2025-10-07T17:39:39.000Z"}]]},"readingTime":{"minutes":3.19,"words":957},"git":{"createdTime":1748511651000,"updatedTime":1759858779000,"contributors":[{"name":"pengzhanbo","username":"pengzhanbo","email":"volodymyr@foxmail.com","commits":2,"avatar":"https://avatars.githubusercontent.com/pengzhanbo?v=4","url":"https://github.com/pengzhanbo"}]},"autoDesc":true,"filePathRelative":"设计模式/7.发布-订阅模式.md","headers":[]}');export{g as comp,o as data};
