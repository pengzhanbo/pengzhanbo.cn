import{_ as c,c as o,b as a,e as p,w as e,r as t,o as g,a as s}from"./app-D7KDYWdB.js";const y={};function A(v,i){const k=t("Badge"),d=t("RepoCard"),h=t("VPIcon"),r=t("CodeTabs");return g(),o("div",null,[a(k,{text:"NodeJs"}),a(d,{repo:"isaacs/node-lru-cache"}),i[6]||(i[6]=p('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>一个高性能、功能丰富的 <strong>Least Recently Used (LRU) 缓存</strong> 实现库，专为 Node.js 环境设计。</p><p><strong>LRU (最近最少使用)</strong>：当缓存达到设定的容量上限时，它会自动淘汰那些最近最少被访问的项，为新数据腾出空间。 这是管理有限内存资源的有效策略。</p><h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h2><ul><li><p><strong>LRU 缓存</strong>：</p><ul><li>存储键值对 (<code>key</code> -&gt; <code>value</code>)。</li><li>当添加新项导致缓存大小超过 <code>max</code> 或 <code>maxSize</code> 限制时，自动淘汰最近最少使用的项。</li><li>高效的 <code>get</code> (获取)、<code>set</code> (设置/更新)、<code>delete</code> (删除)、<code>has</code> (检查存在) 操作。</li></ul></li><li><p><strong>容量限制</strong>：</p><ul><li><p><code>max</code>: 设置缓存允许存储的最大 条目数量。最常用的限制方式。</p></li><li><p><code>maxSize</code>: 设置缓存允许使用的 最大总大小（字节数或其他单位）。需要配合 <code>sizeCalculation</code> 函数使用。</p></li><li><p><code>sizeCalculation</code>: 一个函数，用于计算每个缓存项的大小（除了其键所占的内存）。 例如，可以用来计算存储对象或字符串的实际内存占用。这对于精确控制内存使用至关重要。</p></li></ul></li><li><p><strong>条目过期 (TTL - Time To Live)</strong>：</p><ul><li><p><code>ttl</code>: 设置全局默认的条目存活时间（毫秒）。超过此时间未访问的条目会被视为过期。</p></li><li><p><code>ttlAutopurge</code>: 是否在读取 (<code>get</code>) 时自动删除已过期的条目 (默认 <code>true</code>)。</p></li><li><p><code>allowStale</code>: 允许在读取 (<code>get</code>) 时返回已过期但尚未被淘汰的条目 (默认 <code>false</code>)。</p></li><li><p><code>updateAgeOnGet</code>: 在读取 (<code>get</code>) 时是否重置条目的“年龄”，将其视为新访问，从而延长它在缓存中的生存时间 (默认 <code>false</code>)。如果为 <code>true</code>，频繁访问的条目几乎不会过期。</p></li><li><p><code>noDeleteOnStaleGet</code>: 当 <code>allowStale</code> 为 <code>true</code> 时，读取过期条目是否不触发异步后台删除 (默认 <code>false</code>，即会触发删除)。</p></li><li><p><code>ttlResolution</code>: 过期检查的时间间隔精度（毫秒）。为了性能，内部不会实时检查每个条目，而是按此间隔批量检查 (默认 <code>0 ms</code>，表示尽可能精确，但实际受事件循环影响)。</p></li><li><p><strong>在 <code>set</code> 时指定 TTL</strong>: 可以单独为每个 <code>set</code> 操作设置该条目的特定 TTL，覆盖全局 <code>ttl</code>。</p></li></ul></li><li><p><strong>获取与更新</strong>：</p><ul><li><code>fetchMethod</code>: 当尝试 <code>get</code> 一个不存在（或允许过期且已过期）的键时，可以用这个函数去异步获取数据。 它会防止对同一个键的重复并发请求（类似 Single Flight），只发出一个请求并将结果返回给所有等待者。 极大简化了 <strong>“缓存未命中则加载”</strong> 的模式。<code>async (key, staleValue, { options, signal, context }) =&gt; {}</code>。</li><li><code>noDeleteOnFetchRejection</code>: 如果 <code>fetchMethod</code> 拒绝 (<code>reject</code>)，是否不删除该键（默认 <code>false</code>，即会删除占位符）。</li><li><code>allowStaleOnFetchRejection</code>: 如果 <code>fetchMethod</code> 拒绝 (<code>reject</code>) 且 <code>allowStale</code> 为 <code>true</code>， 是否返回过期的旧值（如果有） (默认 <code>false</code>)。</li></ul></li></ul><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2>',6)),a(r,{id:"0",data:[{id:"npm"},{id:"pnpm"},{id:"yarn"}],"tab-id":"npm-to-npm-pnpm-yarn"},{title0:e(({value:n,isActive:l})=>[a(h,{provider:"iconify",name:"logos:npm-icon"}),i[0]||(i[0]=s("span",null,"npm",-1))]),title1:e(({value:n,isActive:l})=>[a(h,{provider:"iconify",name:"vscode-icons:file-type-light-pnpm"}),i[1]||(i[1]=s("span",null,"pnpm",-1))]),title2:e(({value:n,isActive:l})=>[a(h,{provider:"iconify",name:"vscode-icons:file-type-yarn"}),i[2]||(i[2]=s("span",null,"yarn",-1))]),tab0:e(({value:n,isActive:l})=>[...i[3]||(i[3]=[s("div",{class:"language-sh","data-highlighter":"shiki","data-ext":"sh",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[s("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[s("code",{class:"language-sh"},[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"npm"),s("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," install"),s("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," lru-cache")])])])],-1)])]),tab1:e(({value:n,isActive:l})=>[...i[4]||(i[4]=[s("div",{class:"language-sh","data-highlighter":"shiki","data-ext":"sh",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[s("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[s("code",{class:"language-sh"},[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"pnpm"),s("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," add"),s("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," lru-cache")])])])],-1)])]),tab2:e(({value:n,isActive:l})=>[...i[5]||(i[5]=[s("div",{class:"language-sh","data-highlighter":"shiki","data-ext":"sh",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[s("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[s("code",{class:"language-sh"},[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"yarn"),s("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," add"),s("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," lru-cache")])])])],-1)])]),_:1}),i[7]||(i[7]=p(`<h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-ts"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> LRUCache</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">lru-cache</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">cache</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">LRUCache</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  max</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">500</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">, </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 最大缓存条数</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // maxSize 和 sizeCalculation 配合使用</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  maxSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">, </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 最大缓存大小</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  sizeCalculation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">) =&gt; </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">length</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">, </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 计算每个缓存项的大小</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  ttl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1000</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 60</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">, </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 存活时间，单位毫秒</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  allowStale</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">, </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 在从缓存中移除之前返回过期项？</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  updateAgeOnGet</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  updateAgeOnHas</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  /// 用于cache.fetch()的异步方法，实现</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 类似stale-while-revalidate（后台更新缓存）的行为模式</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  fetchMethod</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">async</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    staleValue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    { </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">options</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">signal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">context</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  ) =&gt; {},</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 设置值</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">cache</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">set</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">key</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">value</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 获取值</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">cache</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">get</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">key</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // &quot;value&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 检查是否存在</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">cache</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">has</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">key</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // true</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 删除</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">cache</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">delete</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">key</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 非字符串键名完全支持</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 但需注意必须是同一个对象，而非</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 仅结构等效的JSON对象</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">let </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">someObject</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> { </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">cache</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">set</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">someObject</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">a value</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">cache</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">clear</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 清空缓存</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="性能" tabindex="-1"><a class="header-anchor" href="#性能"><span>性能</span></a></h2><ul><li><strong>高度优化</strong>： 使用纯 JavaScript 实现，针对 V8 引擎做了优化。</li><li><strong>零依赖</strong>： 不依赖任何其他 npm 包，体积小，安全性高，安装快速。</li><li><strong>O(1) 操作</strong>： get, set, delete, has 等核心操作的时间复杂度都是常数级，非常高效。</li></ul><h2 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h2><ul><li><strong>数据库查询缓存</strong>： 缓存频繁查询的数据库结果。</li><li><strong>API 响应缓存</strong>： 缓存外部 API 调用的结果。</li><li><strong>计算/渲染结果缓存</strong>： 缓存耗时的计算结果、模板渲染结果。</li><li><strong>会话存储 (Session Storage)</strong>： 在内存中存储用户会话信息（注意持久化和分布式问题）。</li><li><strong>速率限制</strong>： 存储请求计数。</li><li>任何需要内存中快速键值存储且有容量限制和淘汰策略的地方。</li></ul>`,6))])}const D=c(y,[["render",A]]),m=JSON.parse('{"path":"/fe-oss/lru-cache/","title":"lru-cache","lang":"zh-CN","frontmatter":{"title":"lru-cache","createTime":"2024/07/12 14:21:41","permalink":"/fe-oss/lru-cache/","tags":["storage","cache"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"lru-cache\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-07T17:39:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pengzhanbo.cn/fe-oss/lru-cache/"}],["meta",{"property":"og:site_name","content":"鹏展博"}],["meta",{"property":"og:title","content":"lru-cache"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-07T17:39:39.000Z"}],["meta",{"property":"article:tag","content":"cache"}],["meta",{"property":"article:tag","content":"storage"}],["meta",{"property":"article:modified_time","content":"2025-10-07T17:39:39.000Z"}]]},"readingTime":{"minutes":3.77,"words":1132},"git":{"createdTime":1750608045000,"updatedTime":1759858779000,"contributors":[{"name":"pengzhanbo","username":"pengzhanbo","email":"volodymyr@foxmail.com","commits":2,"avatar":"https://avatars.githubusercontent.com/pengzhanbo?v=4","url":"https://github.com/pengzhanbo"}]},"filePathRelative":"开源库指南/数据存储/lru-cache.md","headers":[]}');export{D as comp,m as data};
