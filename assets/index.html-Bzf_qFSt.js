import{_ as i,c as a,e as n,o as t}from"./app-D7KDYWdB.js";const e={};function l(p,s){return t(),a("div",null,[...s[0]||(s[0]=[n(`<h2 id="什么是原型模式" tabindex="-1"><a class="header-anchor" href="#什么是原型模式"><span>什么是原型模式？</span></a></h2><p><mark>Prototype(原型)模式</mark> 是一种 创建型设计模式。</p><p>其核心思想是通过 <strong>复制现有对象</strong>（原型对象）来创建新对象，而不是通过类实例化。 在 JavaScript 中，由于语言本身的 <strong>基于原型的继承机制</strong>，原型模式天然地与对象的行为和继承紧密结合。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>原型模式在 JavaScript 中既是设计模式，也是语言核心机制。 它适合高频创建对象和动态扩展的场景，但需警惕共享状态的副作用。 合理利用原型模式，可以显著提升代码复用性和性能，但需结合项目需求权衡是否引入复杂性。</p></div><h2 id="实现原型模式" tabindex="-1"><a class="header-anchor" href="#实现原型模式"><span>实现原型模式</span></a></h2><ul><li><strong>原型链继承</strong>：每个 JavaScript 对象都有一个 <code>[[Prototype]]</code>（可通过 <code>__proto__</code> 或 <code>Object.getPrototypeOf()</code> 访问），指向其原型对象。</li><li><strong>共享属性和方法</strong>：所有实例共享原型对象上的属性和方法，减少重复定义。</li><li><strong>动态修改</strong>：修改原型对象的属性和方法，会立即反映到所有实例上。</li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-ts"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 原型对象定义</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">carPrototype</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  wheels</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  drive</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">() {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Driving...</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 通过 Object.create() 创建新对象（基于原型）</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">myCar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">create</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">carPrototype</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">myCar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">color</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">red</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">myCar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">wheels</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 4（继承自原型）</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">myCar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">drive</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // &quot;Driving...&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h2><ul><li><p><strong>高效内存利用</strong></p><p>原型上的方法和属性被所有实例共享，避免重复创建相同功能的方法，节省内存。</p></li><li><p><strong>动态性和灵活性</strong></p><p>运行时可以动态修改原型，所有实例自动继承变更。</p></li><li><p><strong>避免重复代码</strong></p><p>通过复用原型，减少冗余代码（例如构造函数中重复绑定方法）。</p></li><li><p><strong>天然支持 JavaScript 继承</strong></p><p>与 JavaScript 的原型链机制无缝结合，是语言原生特性的直接应用。</p></li></ul><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h2><ul><li><p><strong>共享状态的风险</strong></p><p>如果原型属性是引用类型（如数组、对象），所有实例会共享同一份数据。</p></li><li><p><strong>原型链复杂性</strong></p><p>深层次的原型链可能导致属性查找性能下降（需逐级向上搜索）。</p><p>多重继承或复杂原型链可能使代码难以维护。</p></li><li><p><strong>覆盖问题</strong></p><p>实例可以覆盖原型属性，可能导致意外行为：</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-ts"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">create</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">carPrototype</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">wheels</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 覆盖原型属性</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">wheels</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 3（实例属性优先于原型）</span></span></code></pre></div></li></ul><h2 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h2><ul><li><p><strong>需要创建大量相似对象</strong></p><p>例如游戏中的 NPC 敌人、粒子系统等高频创建的场景，复用原型节省内存。</p></li><li><p><strong>动态扩展对象功能</strong></p><p>在运行时为所有实例添加/修改功能（如日志功能、监控逻辑）。</p></li><li><p><strong>替代类继承</strong></p><p>当类继承导致复杂层次结构时，原型模式更轻量灵活。</p></li><li><p><strong>与 <code>Object.create()</code> 结合使用</strong></p><p>明确指定原型对象，避免构造函数和 new 关键字的限制。</p></li></ul><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h2><ul><li><strong>避免共享引用类型属性</strong>：将引用类型属性定义在构造函数中，而非原型。</li><li><strong>浅拷贝/深拷贝</strong>：需要完全独立对象时，使用 <code>Object.assign()</code> 或深拷贝工具。</li><li><strong>ES6 Class 语法糖</strong>：底层仍基于原型，但提供更清晰的抽象。</li></ul>`,15)])])}const r=i(e,[["render",l]]),k=JSON.parse('{"path":"/design-pattern/prototype/","title":"原型模式","lang":"zh-CN","frontmatter":{"title":"原型模式","createTime":"2018/04/22 15:56:31","permalink":"/design-pattern/prototype/","tags":["设计模式"],"description":"什么是原型模式？ Prototype(原型)模式 是一种 创建型设计模式。 其核心思想是通过 复制现有对象（原型对象）来创建新对象，而不是通过类实例化。 在 JavaScript 中，由于语言本身的 基于原型的继承机制，原型模式天然地与对象的行为和继承紧密结合。 提示 原型模式在 JavaScript 中既是设计模式，也是语言核心机制。 它适合高频创建...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原型模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-07T17:39:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pengzhanbo.cn/design-pattern/prototype/"}],["meta",{"property":"og:site_name","content":"鹏展博"}],["meta",{"property":"og:title","content":"原型模式"}],["meta",{"property":"og:description","content":"什么是原型模式？ Prototype(原型)模式 是一种 创建型设计模式。 其核心思想是通过 复制现有对象（原型对象）来创建新对象，而不是通过类实例化。 在 JavaScript 中，由于语言本身的 基于原型的继承机制，原型模式天然地与对象的行为和继承紧密结合。 提示 原型模式在 JavaScript 中既是设计模式，也是语言核心机制。 它适合高频创建..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-07T17:39:39.000Z"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:modified_time","content":"2025-10-07T17:39:39.000Z"}]]},"readingTime":{"minutes":2.73,"words":819},"git":{"createdTime":1748511651000,"updatedTime":1759858779000,"contributors":[{"name":"pengzhanbo","username":"pengzhanbo","email":"volodymyr@foxmail.com","commits":2,"avatar":"https://avatars.githubusercontent.com/pengzhanbo?v=4","url":"https://github.com/pengzhanbo"}]},"autoDesc":true,"filePathRelative":"设计模式/8.原型模式.md","headers":[]}');export{r as comp,k as data};
