import{_ as o,c as t,e as r,o as i}from"./app-D7KDYWdB.js";const c={};function d(a,e){return i(),t("div",null,[...e[0]||(e[0]=[r('<div class="hint-container tip"><p class="hint-container-title">提问</p><ol><li>对象有哪些原生方法？</li><li>数组有哪些原生方法？</li><li>什么是类数组？</li></ol></div><h2 id="对象的原生方法" tabindex="-1"><a class="header-anchor" href="#对象的原生方法"><span>对象的原生方法</span></a></h2><ul><li><code>Object.assign()</code> 通过复制一个或多个对象来创建一个新的对象</li><li><code>Object.create()</code> 使用指定的原型对象和属性创建一个新对象</li><li><code>Object.defineProperty()</code> 给对象添加一个属性并指定该属性的配置</li><li><code>Object.defineProperties()</code> 给对象添加多个属性并分别指定它们的配置</li><li><code>Object.entries()</code> 返回给定对象自身可枚举属性的<code>[key, value]</code> 数组</li><li><code>Object.freeze()</code> 冻结对象，其他代码不能删除或更改任何属性</li><li><code>Object.getOwnPropertyNames()</code> 返回一个包含了指定对象所有可枚举或不可枚举的属性名的数组</li><li><code>Object.getOwnPropertySymbols()</code> 返回一个包含了指定对象自身所有的符号属性</li><li><code>Object.getPrototypeOf()</code> 返回指定对象的原型对象</li><li><code>Object.is()</code> 比较两个值是否相同。(所有 NaN值都相等。)</li><li><code>Object.keys()</code> 返回一个包含所有给定对象自身可枚举属性名称的数组</li><li><code>Object.preventExtensions()</code> 防止对象的任何扩展</li><li><code>Object.seal()</code> 防止其他代码删除对象的属性</li><li><code>Object.values()</code> 返回给定对象自身可枚举值的数组</li></ul><h2 id="数组的原生方法" tabindex="-1"><a class="header-anchor" href="#数组的原生方法"><span>数组的原生方法</span></a></h2><h3 id="静态方法" tabindex="-1"><a class="header-anchor" href="#静态方法"><span>静态方法</span></a></h3><ul><li><code>Array.from()</code> 从类数组对象或可迭代对象中创建一个新的数组实例</li><li><code>Array.isArray()</code> 判断某个变量是否是一个数组对象</li><li><code>Array.of()</code> 根据一组参数来创建新的数组实例</li></ul><h3 id="实例方法" tabindex="-1"><a class="header-anchor" href="#实例方法"><span>实例方法</span></a></h3><ul><li><code>Array.prototype.concat()</code> 合并两个或多个数组，并返回一个新的数组</li><li><code>Array.prototype.copyWithin</code> 浅复制数组的一部分到同一数组的另一个返回，并返回它，不会改变原数组的长度</li><li><code>Array.prototype.entries()</code> 返回一个新的<code>Array Iterator</code>对象，对象包含数组中的每个索引的键值对</li><li><code>Array.prototype.every()</code> 测试一个数组组内的所有元素是否都能通过某个指定函数的测试，并返回一个布尔值</li><li><code>Array.prototype.fill()</code> 用一个固定值填充一个数组中的全部元素</li><li><code>Array.prototype.filter()</code> 创建一个新数组，包含通过所提供的函数实现的测试的所有元素</li><li><code>Array.prototype.find()</code> 返回数组中满足提供的测试函数的第一个元素，否则返回 undefined</li><li><code>Array.prototype.findIndex()</code> 返回数组中满足提供的测试函数的第一个元素的索引，否则返回 -1</li><li><code>Array.prototype.flat()</code> 按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回</li><li><code>Array.prototype.flatMap()</code> 使用映射函数映射每一个元素，然后将结果压缩成一个新数组</li><li><code>Array.prototype.forEach()</code> 对数组的每一个元素执行一次给定的函数</li><li><code>Array.prototype.includes()</code> 判断一个数组是否包含一个指定的值，返回一个布尔值</li><li><code>Array.prototype.indexOf()</code> 返回在数组中可以找到一个给定元素的第一个索引，不存在则返回 -1</li><li><code>Array.prototype.join()</code> 将一个数组的所有元素链接成一个字符串并返回</li><li><code>Array.prototype.keys()</code> 返回一个包含数组中每个索引建的 <code>Array Iterator</code>对象</li><li><code>Array.prototype.lastIndexOf()</code> 返回指定元素在数组中的最后一个索引，不存在则返回 -1</li><li><code>Array.prototype.map()</code> 返回一个数组，其结果是该数组的每个元素是调用一次提供的函数后的返回值</li><li><code>Array.prototype.pop()</code> 从数组中删除最后一个元素，并返回该元素的值</li><li><code>Array.prototype.push()</code> 将一个或多个元素添加到数组的末尾，并返回该数组的新长度</li><li><code>Array.prototype.reduce()</code> 对数组中的每个元素指定一个指定的reducer函数（从左向右），将其结果汇总为单个返回值</li><li><code>Array.prototype.reduceRight()</code> 类似于 <code>reduce()</code>，但是是从右向左</li><li><code>Array.prototype.reverse()</code> 将数组中元素的位置颠倒，并返回该数组。该方法会改变原数组</li><li><code>Array.prototype.shift()</code> 从数组中删除第一个元素，并返回该元素的值</li><li><code>Array.prototype.slice()</code> 提取原数组的一部分并返回一个新数组</li><li><code>Array.prototype.some()</code> 测试数组中是不是至少有一个元素通过了提供的测试函数</li><li><code>Array.prototype.sort()</code> 对数组元素进行原地排序并返回此数组</li><li><code>Array.prototype.splice()</code> 通过删除或替换现有元素或者原地添加新的元素来修改数组，并以数组形式返回被修改的内容</li><li><code>Array.prototype.unshift()</code> 将一个或多个元素添加到数组的头部，并返回该数组的新长度</li><li><code>Array.prototype.values()</code> 返回一个新的<code>Array Iterator</code> 对象，该对象包含数组每个索引的值。</li></ul><h3 id="类数组" tabindex="-1"><a class="header-anchor" href="#类数组"><span>类数组</span></a></h3><p>类数组是指 一个拥有 <code>length</code> 属性 和 若干索引属性的对象。</p><p>类数组对象和数组类似，但不能调用数组的方法。</p><p>常见的类数组有， <code>arguments</code> 和 DOM方法返回的结果</p>',12)])])}const p=o(c,[["render",d]]),n=JSON.parse('{"path":"/interview-question/kr0wd3xk/","title":"数组和对象","lang":"zh-CN","frontmatter":{"title":"数组和对象","createTime":"2022/04/16 03:30:44","permalink":"/interview-question/kr0wd3xk/","description":"提问 对象有哪些原生方法？ 数组有哪些原生方法？ 什么是类数组？ 对象的原生方法 Object.assign() 通过复制一个或多个对象来创建一个新的对象 Object.create() 使用指定的原型对象和属性创建一个新对象 Object.defineProperty() 给对象添加一个属性并指定该属性的配置 Object.definePropert...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数组和对象\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-07T17:39:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pengzhanbo.cn/interview-question/kr0wd3xk/"}],["meta",{"property":"og:site_name","content":"鹏展博"}],["meta",{"property":"og:title","content":"数组和对象"}],["meta",{"property":"og:description","content":"提问 对象有哪些原生方法？ 数组有哪些原生方法？ 什么是类数组？ 对象的原生方法 Object.assign() 通过复制一个或多个对象来创建一个新的对象 Object.create() 使用指定的原型对象和属性创建一个新对象 Object.defineProperty() 给对象添加一个属性并指定该属性的配置 Object.definePropert..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-07T17:39:39.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-07T17:39:39.000Z"}]]},"readingTime":{"minutes":4.03,"words":1210},"git":{"createdTime":1650212829000,"updatedTime":1759858779000,"contributors":[{"name":"pengzhanbo","username":"pengzhanbo","email":"volodymyr@foxmail.com","commits":12,"avatar":"https://avatars.githubusercontent.com/pengzhanbo?v=4","url":"https://github.com/pengzhanbo"}]},"autoDesc":true,"filePathRelative":"面试题/JavaScript/数组和对象.md","headers":[]}');export{p as comp,n as data};
