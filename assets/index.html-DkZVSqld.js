import{_ as t,c as a,e as i,o as n}from"./app-D7KDYWdB.js";const o={};function p(r,e){return n(),a("div",null,[...e[0]||(e[0]=[i('<div class="hint-container tip"><p class="hint-container-title">提问</p><ol><li>什么是执行上下文</li><li>什么是执行栈</li></ol></div><h2 id="执行上下文" tabindex="-1"><a class="header-anchor" href="#执行上下文"><span>执行上下文</span></a></h2><p>执行上下文就是当前 <code>JavaScript</code> 代码被解析和执行时所在环境的抽象概念， <code>JavaScript</code> 中运行任何的代码都是在执行上下文中运行。</p><h3 id="类型" tabindex="-1"><a class="header-anchor" href="#类型"><span>类型</span></a></h3><ul><li><p>全局执行上下文</p><p>最基础的执行上下文，不在任何函数中的代码都位于全局执行上下中。 全局执行上下文有两个特性：1. 创建一个全局对象，如 window；2. 将this指向这个全局对象。 一个程序只能有一个全局上下文。</p></li><li><p>函数执行上下文</p><p>每次调用函数时，都会为该函数创建一个新的执行上下文。 每个函数都拥有自己的执行上下文，但只有被调用时才会被创建。</p></li><li><p>eval函数执行上下文</p><p>运行在eval函数里中的代码有自己的执行上下文</p></li></ul><h3 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h3><ul><li><p>创建阶段</p><ul><li>创建变量对象</li><li>创建作用域链</li><li>确定this指向</li></ul></li><li><p>执行阶段</p></li><li><p>回收阶段</p></li></ul><h2 id="执行栈" tabindex="-1"><a class="header-anchor" href="#执行栈"><span>执行栈</span></a></h2><p>执行栈指 执行上下文栈（Execute Context Stack）。</p><p>执行栈 是一个存储函数调用的栈结构，遵循 先进后出 的规则。</p><ul><li>javascript 执行在单线程中，所有代码都是排队执行</li><li>执行全局代码时，创建全局执行上下文并压入执行栈的顶部</li><li>每当进入一个函数的执行就创建一个函数执行上下文，并压入执行栈的顶部，当前函数执行完后，当前函数的执行上下文出栈，等待垃圾回收</li><li>浏览器的JS引擎总是访问执行栈顶部的执行上下文</li><li>全局执行上下文总是只有一个，它在浏览器关闭时出栈。</li></ul>',11)])])}const c=t(o,[["render",p]]),s=JSON.parse('{"path":"/interview-question/7xxy6of5/","title":"执行上下文和执行栈","lang":"zh-CN","frontmatter":{"title":"执行上下文和执行栈","createTime":"2022/04/22 09:40:24","permalink":"/interview-question/7xxy6of5/","description":"提问 什么是执行上下文 什么是执行栈 执行上下文 执行上下文就是当前 JavaScript 代码被解析和执行时所在环境的抽象概念， JavaScript 中运行任何的代码都是在执行上下文中运行。 类型 全局执行上下文 最基础的执行上下文，不在任何函数中的代码都位于全局执行上下中。 全局执行上下文有两个特性：1. 创建一个全局对象，如 window；2....","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"执行上下文和执行栈\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-07T17:39:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pengzhanbo.cn/interview-question/7xxy6of5/"}],["meta",{"property":"og:site_name","content":"鹏展博"}],["meta",{"property":"og:title","content":"执行上下文和执行栈"}],["meta",{"property":"og:description","content":"提问 什么是执行上下文 什么是执行栈 执行上下文 执行上下文就是当前 JavaScript 代码被解析和执行时所在环境的抽象概念， JavaScript 中运行任何的代码都是在执行上下文中运行。 类型 全局执行上下文 最基础的执行上下文，不在任何函数中的代码都位于全局执行上下中。 全局执行上下文有两个特性：1. 创建一个全局对象，如 window；2...."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-07T17:39:39.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-07T17:39:39.000Z"}]]},"readingTime":{"minutes":1.61,"words":482},"git":{"createdTime":1650697746000,"updatedTime":1759858779000,"contributors":[{"name":"pengzhanbo","username":"pengzhanbo","email":"q942450674@outlook.com","commits":7,"avatar":"https://avatars.githubusercontent.com/pengzhanbo?v=4","url":"https://github.com/pengzhanbo"}]},"autoDesc":true,"filePathRelative":"面试题/JavaScript/执行上下文和执行栈.md","headers":[]}');export{c as comp,s as data};
