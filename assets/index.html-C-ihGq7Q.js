import{_ as r,c as a,a as o,e as s,d as i,b as n,w as p,r as l,o as c}from"./app-D7KDYWdB.js";const m={};function d(h,e){const t=l("VPLink");return c(),a("div",null,[e[2]||(e[2]=o("div",{class:"hint-container tip"},[o("p",{class:"hint-container-title"},"提问"),o("ol",null,[o("li",null,"简单介绍一下 promise"),o("li",null,"说一下 Promise A+ 规范")])],-1)),o("p",null,[e[1]||(e[1]=i("参阅 ",-1)),n(t,{href:"/article/q40nq4hv"},{default:p(()=>[...e[0]||(e[0]=[i("详解promise",-1)])]),_:1})]),e[3]||(e[3]=s('<h2 id="promise" tabindex="-1"><a class="header-anchor" href="#promise"><span>promise</span></a></h2><p>promise 是一个 异步编程解决方案，提供了一种 链式调用的方法，以一种更为扁平的方式处理复杂异步编程场景。 在早期使用 异步回调函数时，经常容易出现 在异步回调中写异步回调的回调嵌套地域，导致代码拥冗难以阅读。</p><p><code>Promise</code>是一个构造函数，用于创建一个新的 Promise 对象，该构造函数主要用于包装还没添加 promise支持的函数。</p><h3 id="状态" tabindex="-1"><a class="header-anchor" href="#状态"><span>状态</span></a></h3><p>promise创建后，必然出于一下三种状态之一：</p><ul><li><code>pending</code> 待定状态</li><li><code>fulfilled</code> 操作成功</li><li><code>rejected</code> 操作失败</li></ul><p>当状态从 <code>pending</code> 更新到另外一种状态后，就再也不能变更为其他状态。</p><h3 id="实例方法" tabindex="-1"><a class="header-anchor" href="#实例方法"><span>实例方法</span></a></h3><ul><li><code>.then()</code> 接受两个函数参数 ，状态从 pending 更新到另一个状态时触发</li><li><code>.cache()</code> 接受一个函数参数，状态从 pending 更新到 rejected 时触发</li><li><code>.finally()</code> 只要状态发生变化，所有 then() 和 catch() 执行完成后，最后执行 finally</li></ul><h3 id="静态方法" tabindex="-1"><a class="header-anchor" href="#静态方法"><span>静态方法</span></a></h3><ul><li><code>resolve(value)</code> 返回一个 状态为给定的value决定的 promise实例</li><li><code>reject(reason)</code> 返回一个状态为失败的 promise 实例</li><li><code>all()</code> 传入一组promise实例并返回一个新的promise实例，当传入的promises状态均更新为成功时触发 返回实例的状态更新为成功，否则更新为失败</li><li><code>allSettled()</code> 传入一组promise实例并返回一个新的promise实例，当传入的promises状态均更新到最终状态， 触发返回实例promise的状态更新</li><li><code>race()</code> 传入一组promise实例并返回一个新的promise实例，只要传入的promises有一个状态更新的熬最终状态， 触发返回实例promise的状态更新</li></ul><h2 id="promise-a-规范" tabindex="-1"><a class="header-anchor" href="#promise-a-规范"><span>Promise A+ 规范</span></a></h2><p>Promise A+ 规范 是 一个开放、健全且通用的 Javascript Promise标准。</p><p>规范不设计如何创建、解决和拒绝promise，而是专注于提供一个通用的then方法。</p>',14))])}const f=r(m,[["render",d]]),g=JSON.parse('{"path":"/interview-question/a895fu8f/","title":"promise","lang":"zh-CN","frontmatter":{"title":"promise","createTime":"2022/04/17 05:53:48","permalink":"/interview-question/a895fu8f/","description":"提问 简单介绍一下 promise 说一下 Promise A+ 规范 参阅 promise promise 是一个 异步编程解决方案，提供了一种 链式调用的方法，以一种更为扁平的方式处理复杂异步编程场景。 在早期使用 异步回调函数时，经常容易出现 在异步回调中写异步回调的回调嵌套地域，导致代码拥冗难以阅读。 Promise是一个构造函数，用于创建一个...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"promise\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-07T17:39:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pengzhanbo.cn/interview-question/a895fu8f/"}],["meta",{"property":"og:site_name","content":"鹏展博"}],["meta",{"property":"og:title","content":"promise"}],["meta",{"property":"og:description","content":"提问 简单介绍一下 promise 说一下 Promise A+ 规范 参阅 promise promise 是一个 异步编程解决方案，提供了一种 链式调用的方法，以一种更为扁平的方式处理复杂异步编程场景。 在早期使用 异步回调函数时，经常容易出现 在异步回调中写异步回调的回调嵌套地域，导致代码拥冗难以阅读。 Promise是一个构造函数，用于创建一个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-07T17:39:39.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-07T17:39:39.000Z"}]]},"readingTime":{"minutes":1.79,"words":536},"git":{"createdTime":1650212829000,"updatedTime":1759858779000,"contributors":[{"name":"pengzhanbo","username":"pengzhanbo","email":"volodymyr@foxmail.com","commits":12,"avatar":"https://avatars.githubusercontent.com/pengzhanbo?v=4","url":"https://github.com/pengzhanbo"}]},"autoDesc":true,"filePathRelative":"面试题/JavaScript/promise.md","headers":[]}');export{f as comp,g as data};
