import{_ as e,c as a,e as i,o}from"./app-D7KDYWdB.js";const r={};function n(p,t){return o(),a("div",null,[...t[0]||(t[0]=[i('<div class="hint-container tip"><p class="hint-container-title">提问</p><ol><li>什么是 Virtual DOM?</li><li>Virtual DOM 比 原生DOM快在哪里？</li></ol></div><h2 id="virtual-dom" tabindex="-1"><a class="header-anchor" href="#virtual-dom"><span>Virtual DOM</span></a></h2><p>本质上，<code>Virtual DOM</code> 是一个普通的javascript对象。 我们将需要需要插入的文档的DOM树结构进行解析，使用一个对象结构进行表述， 比如一个元素对象，包含了 <code>TagName</code> , <code>props</code> , <code>attribute</code> ,<code>children</code> 等属性， 然后我们将这个对象结构保存起来，最后再将DOM片段插入到文档中。</p><p>当页面的状态发生变化，需要对页面的DOM结构进行调整的时候，首先根据变更的状态，重新构建一颗对象树， 然后将新的对象数和旧的对象数进行对比，记录下两颗树的差异，最后将有差异的地方应用到DOM树中，视图就实现了更新。</p><h2 id="virtual-dom-比-原生dom快在哪里" tabindex="-1"><a class="header-anchor" href="#virtual-dom-比-原生dom快在哪里"><span>Virtual DOM 比 原生DOM快在哪里？</span></a></h2><p>首先，<code>Virtual DOM</code> 本身并没有比原生DOM直接操作DOM要快，但是 <code>Virtual DOM</code> 这种方法对于需要进行大量的DOM操作， 操作颗粒比较细、多、复杂的场景下，能够很好的提高操作效率。</p><p>通过在操作DOM前，通过 Diff 算法对比新旧两个<code>Virtual DOM</code>，我们可以 确定最小的更新范围，尽可能的减少DOM操作带来的回流和重绘的影响。</p><p>其目的是是提高了我们的开发时的可维护性，在任意情况下，都能保证在 <code>Virtual DOM</code> 带来的尽量小的性能消耗操作DOM。</p><h2 id="dom-树的比较" tabindex="-1"><a class="header-anchor" href="#dom-树的比较"><span>DOM 树的比较</span></a></h2><p>两个树的完全 diff 算法的时间复杂度为 O(n^3) ，但是在前端中，我们很少会跨层级的移动元素，所以我们只需要比较同一层级的元素进行比较，这样就可以将算法的时间复杂度降低为 O(n)。</p><p>算法首先会对新旧两棵树进行一个深度优先的遍历，这样每个节点都会有一个序号。在深度遍历的时候，每遍历到一个节点，我们就将这个节点和新的树中的节点进行比较，如果有差异，则将这个差异记录到一个对象中。</p><p>在对列表元素进行对比的时候，由于 TagName 是重复的，所以我们不能使用这个来对比。我们需要给每一个子节点加上一个 key，列表对比的时候使用 key 来进行比较，这样我们才能够复用老的 DOM 树上的节点。</p>',12)])])}const l=e(r,[["render",n]]),d=JSON.parse('{"path":"/interview-question/w122van2/","title":"Virtual DOM","lang":"zh-CN","frontmatter":{"title":"Virtual DOM","createTime":"2022/04/21 05:30:37","permalink":"/interview-question/w122van2/","description":"提问 什么是 Virtual DOM? Virtual DOM 比 原生DOM快在哪里？ Virtual DOM 本质上，Virtual DOM 是一个普通的javascript对象。 我们将需要需要插入的文档的DOM树结构进行解析，使用一个对象结构进行表述， 比如一个元素对象，包含了 TagName , props , attribute ,chil...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Virtual DOM\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-07T17:39:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pengzhanbo.cn/interview-question/w122van2/"}],["meta",{"property":"og:site_name","content":"鹏展博"}],["meta",{"property":"og:title","content":"Virtual DOM"}],["meta",{"property":"og:description","content":"提问 什么是 Virtual DOM? Virtual DOM 比 原生DOM快在哪里？ Virtual DOM 本质上，Virtual DOM 是一个普通的javascript对象。 我们将需要需要插入的文档的DOM树结构进行解析，使用一个对象结构进行表述， 比如一个元素对象，包含了 TagName , props , attribute ,chil..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-07T17:39:39.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-07T17:39:39.000Z"}]]},"readingTime":{"minutes":2.16,"words":647},"git":{"createdTime":1650536919000,"updatedTime":1759858779000,"contributors":[{"name":"pengzhanbo","username":"pengzhanbo","email":"q942450674@outlook.com","commits":9,"avatar":"https://avatars.githubusercontent.com/pengzhanbo?v=4","url":"https://github.com/pengzhanbo"}]},"autoDesc":true,"filePathRelative":"面试题/Vue/VirtualDom.md","headers":[]}');export{l as comp,d as data};
