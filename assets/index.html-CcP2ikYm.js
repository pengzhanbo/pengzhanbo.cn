import{_ as e,c as t,e as n,b as l,a as i,r as h,o as k}from"./app-D7KDYWdB.js";const p={};function r(d,s){const a=h("Mermaid");return k(),t("div",null,[s[0]||(s[0]=n(`<h2 id="fiber-架构的核心概念" tabindex="-1"><a class="header-anchor" href="#fiber-架构的核心概念"><span>Fiber 架构的核心概念</span></a></h2><h3 id="fiber-节点的本质" tabindex="-1"><a class="header-anchor" href="#fiber-节点的本质"><span>Fiber 节点的本质</span></a></h3><p>Fiber 节点是 React 16 引入的核心架构元素，它代表了 <strong>组件树中的工作单元</strong> 。 每个 Fiber 节点对应一个 React 元素，构成了一种 <strong>基于链表的虚拟 DOM 实现</strong>。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> FiberNode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">tag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pendingProps</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> mode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 树形结构指针</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 指向父节点</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">child</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 指向第一个子节点</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">sibling</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 指向下一个兄弟节点</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">index</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 在父节点中的索引位置</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 静态数据结构</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">tag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> tag</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 组件类型标记</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> key</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 唯一标识</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">elementType</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 元素类型</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 实际类型（函数/类/DOM标签）</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">stateNode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 关联的DOM节点</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 动态工作单元</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">pendingProps</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pendingProps</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 待处理props</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">memoizedProps</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 已应用的props</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">memoizedState</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 当前状态</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">updateQueue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 状态更新队列</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">flags</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> NoFlags</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 生命周期标记</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">subtreeFlags</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> NoFlags</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 子树标记</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lanes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> NoLanes</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 优先级标记</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fiber-的三重含义" tabindex="-1"><a class="header-anchor" href="#fiber-的三重含义"><span>Fiber 的三重含义</span></a></h3><p>Fiber 架构包含三个维度的设计理念：</p><ol><li><strong>架构层面</strong>：取代传统递归更新（Stack Reconciler）的 <strong>可中断异步架构</strong></li><li><strong>静态数据结构</strong>：表示组件树结构的 <strong>链表节点</strong></li><li><strong>动态工作单元</strong>：封装组件状态、副作用和更新操作的 <strong>执行单元</strong></li></ol><p>这种设计使 React 能够将渲染工作拆分为可增量执行的小任务单元，实现时间切片和优先级调度。</p><h2 id="双缓冲技术解析" tabindex="-1"><a class="header-anchor" href="#双缓冲技术解析"><span>双缓冲技术解析</span></a></h2><h3 id="双缓冲核心概念" tabindex="-1"><a class="header-anchor" href="#双缓冲核心概念"><span>双缓冲核心概念</span></a></h3><p>双缓冲（Double Buffering）是一种图形渲染优化技术，在 React 中应用为：</p><ul><li><strong>当前树（Current Tree）</strong>：代表屏幕上实际渲染的内容</li><li><strong>工作树（WorkInProgress Tree）</strong>：内存中构建的新树，用于准备下一次更新</li></ul><p>两棵树通过 <code>alternate</code> 属性相互引用：</p><div class="language-javascript" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">current</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">alternate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> workInProgress</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">workInProgress</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">alternate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> current</span></span></code></pre></div><h3 id="双缓冲工作流程" tabindex="-1"><a class="header-anchor" href="#双缓冲工作流程"><span>双缓冲工作流程</span></a></h3>`,15)),l(a,{code:"eJxLL0osyFAIceFSAALH6Kd7Gp4u745V0NW1U3Cqfjlj27N1W2vBck4gsZqXy6Y9W7Pw2Y5Nz+ZPrlFwjn7aMfvp7l1umUmpRUH5+SWxYKXOYO0u0c/mtQAlw/OLsj3zAory04tSi4ufLZgIUeQCVuQa/ax/wpNdSyAmQmRcwTJuQLPbn/Uuci4tKkrNK3nW0/5yUkcsF5Jbnndte9bQ+Gz2lmfTNtQouEPdAuTgsNEdbK5H9NMlvc+nrHjR1fS8aae+S2Za2vN1059tngpR5AFW5AlzFthwiIwnxFkQF7iBOV7Rz3dPfjZ3fiwXAMrgisA="}),s[1]||(s[1]=i("h2",{id:"首次渲染-mount-流程",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#首次渲染-mount-流程"},[i("span",null,"首次渲染（Mount）流程")])],-1)),s[2]||(s[2]=i("h3",{id:"关键数据结构",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#关键数据结构"},[i("span",null,"关键数据结构")])],-1)),l(a,{code:"eJxtkD0OwjAMhfeewjviAhlYqJAYAIkbuK0pEakjOe6AEHcnDYX+KB7f9xK/59phCKXFVrArIE4S4GArkqv3evYNwSuRYTZ1L0Ks5usY6Ix5VrRMcuSbN1BeTvufkkzvYr1h/btia4D7LqJJfNDTQFCx3E5iUFQanqc9yxzolIQjz6YU0l44X+BuXZMlwVYu7l+zsdHyWtvtbtbOwHiyyZl1/UMXHz1edQU="}),s[3]||(s[3]=n(`<h3 id="挂载过程" tabindex="-1"><a class="header-anchor" href="#挂载过程"><span>挂载过程</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 创建应用根节点</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ReactDOM</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createRoot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">document</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getElementById</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">root</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 内部执行流程</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> createFiberRoot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> FiberRootNode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> hostRootFiber</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> createHostRootFiber</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 建立关联</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">current</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> hostRootFiber</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  hostRootFiber</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">stateNode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> root</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> root</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p><strong>初始化阶段</strong>：</p><ul><li>创建 <code>fiberRootNode</code>（应用根节点）</li><li>创建 <code>hostRootFiber</code>（组件树根节点）</li><li>建立相互引用关系</li></ul></li><li><p><strong>渲染阶段</strong>：</p><ul><li>基于组件 JSX 深度优先构建 WorkInProgress 树</li><li>新节点与 current 树节点建立 <code>alternate</code> 关联</li></ul></li><li><p><strong>提交阶段</strong>：</p><ul><li>将 WorkInProgress 树渲染到 DOM</li><li>切换 <code>fiberRootNode.current</code> 指向新树</li><li>WorkInProgress 树变为 Current 树</li></ul></li></ol><h2 id="更新-update-流程" tabindex="-1"><a class="header-anchor" href="#更新-update-流程"><span>更新（Update）流程</span></a></h2><h3 id="更新触发机制" tabindex="-1"><a class="header-anchor" href="#更新触发机制"><span>更新触发机制</span></a></h3><p>当组件状态变更触发更新：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-jsx"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Counter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> setCount</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">={()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> setCount</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)}&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      Count:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      {</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  )</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更新处理流程" tabindex="-1"><a class="header-anchor" href="#更新处理流程"><span>更新处理流程</span></a></h3>`,8)),l(a,{code:"eJwrTi0sTc1LTnXJTEwvSszlUgCCgsSikszkzILEvBKF0OLUIoXEYoXnU1Y869j+ZNeSJ7smYSgKSk1MLgGpAjNe7J/wYmHPs+nbsKjLS0ktghj4bMemZ/MnP525ggusDGSPrp0d2AArhRfLlz3tn/i8a9uzhsZns7c8m7YBrAgsi1D1tGP20927gJLh+UXZnnkBRfnpRanFxc8WTMSm2iUzLe35uunPNk990dX0vGnn0yW9QE+hqYS4z0rhWf8EoF9RrIZIoahy8fd9Nrn3yd452F3X/qx3kXNpUVFqXsmznvaXkzqQlAHVgbwMtAlsx9N1Pc86JnABAC1zq1c="}),s[4]||(s[4]=n('<ol><li><p><strong>构建新树</strong>：</p><ul><li>基于 current 树创建新 WorkInProgress 树</li><li>通过 <code>alternate</code> 属性复用现有节点</li></ul></li><li><p><strong>Diff 算法</strong>：</p><ul><li>对比新旧树确定最小变更集</li><li>标记需要更新的节点（<code>flags</code>）</li></ul></li><li><p><strong>提交阶段</strong>：</p><ul><li>应用 DOM 更新</li><li>切换 <code>fiberRootNode.current</code> 指针</li><li>新树成为 current 树</li></ul></li></ol><h3 id="节点复用机制" tabindex="-1"><a class="header-anchor" href="#节点复用机制"><span>节点复用机制</span></a></h3><p>在更新过程中，React 通过 Diff 算法决定节点复用策略：</p>',3)),l(a,{code:"eJxLy8kvT85ILCpRCHHhUgACx+inexqeLu9+NnvLs2kbYhV0de0UnKpfdDU9b9r5bMb6pxOWPV074+mcFbVg1U4g+RqgeI2Cc/SzxQ3P5i99unHes4blTyf1PN+4++m87liwOmewuqf9658u6X0+ZUWNgks0hPW8b8OzOZ0Q45GVPtnRi6TaNfppx+ynu3cBXYSsFGI70Ek1Cm7YVbgoqCm4ArEb2B/u0c93L3++e+3TJS3PJ7Q9XTsBWak7WIlH9NN1Pc86JkC9zwUAVYCNlQ=="}),s[5]||(s[5]=n('<h2 id="双缓冲机制的优势" tabindex="-1"><a class="header-anchor" href="#双缓冲机制的优势"><span>双缓冲机制的优势</span></a></h2><ol><li><strong>无闪烁更新</strong>：在内存中完成整棵树构建后一次性提交</li><li><strong>状态一致性</strong>：确保渲染过程中状态不会部分更新</li><li><strong>异步可中断</strong>：允许高优先级任务中断当前渲染</li><li><strong>高效回退</strong>：更新失败可回退到完整旧树</li><li><strong>资源复用</strong>：节点复用减少内存分配开销</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>React Fiber 架构通过双缓冲机制实现了：</p><ul><li><strong>增量渲染</strong>：将大型更新拆分为可中断的小任务</li><li><strong>优先级调度</strong>：确保高优先级交互（如动画）即时响应</li><li><strong>高效更新</strong>：通过节点复用和精确 DOM 操作优化性能</li><li><strong>错误隔离</strong>：组件树错误不影响整个应用</li></ul><p>双缓冲机制作为核心优化策略，使 React 能够平衡渲染性能与用户体验，为复杂应用提供流畅的交互体验。理解这一机制有助于开发者编写更高效的 React 组件，并深入掌握框架底层原理。</p>',6))])}const c=e(p,[["render",r]]),o=JSON.parse('{"path":"/article/6lgzinfk/","title":"React 原理解析：Fiber 架构与双缓冲机制","lang":"zh-CN","frontmatter":{"title":"React 原理解析：Fiber 架构与双缓冲机制","createTime":"2025/03/25 16:09:01","permalink":"/article/6lgzinfk/","tags":["react"],"description":"Fiber 架构的核心概念 Fiber 节点的本质 Fiber 节点是 React 16 引入的核心架构元素，它代表了 组件树中的工作单元 。 每个 Fiber 节点对应一个 React 元素，构成了一种 基于链表的虚拟 DOM 实现。 Fiber 的三重含义 Fiber 架构包含三个维度的设计理念： 架构层面：取代传统递归更新（Stack Recon...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"React 原理解析：Fiber 架构与双缓冲机制\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-07T17:39:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pengzhanbo.cn/article/6lgzinfk/"}],["meta",{"property":"og:site_name","content":"鹏展博"}],["meta",{"property":"og:title","content":"React 原理解析：Fiber 架构与双缓冲机制"}],["meta",{"property":"og:description","content":"Fiber 架构的核心概念 Fiber 节点的本质 Fiber 节点是 React 16 引入的核心架构元素，它代表了 组件树中的工作单元 。 每个 Fiber 节点对应一个 React 元素，构成了一种 基于链表的虚拟 DOM 实现。 Fiber 的三重含义 Fiber 架构包含三个维度的设计理念： 架构层面：取代传统递归更新（Stack Recon..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-07T17:39:39.000Z"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:modified_time","content":"2025-10-07T17:39:39.000Z"}]]},"readingTime":{"minutes":4.31,"words":1293},"git":{"createdTime":1749986499000,"updatedTime":1759858779000,"contributors":[{"name":"pengzhanbo","username":"pengzhanbo","email":"volodymyr@foxmail.com","commits":2,"avatar":"https://avatars.githubusercontent.com/pengzhanbo?v=4","url":"https://github.com/pengzhanbo"}]},"autoDesc":true,"filePathRelative":"blog/1.前端/4.React/React原理解析——Fiber 架构与双缓冲机制.md","headers":[],"categoryList":[{"id":"72e6d5","sort":1,"name":"前端"},{"id":"0d0c6d","sort":4,"name":"React"}]}');export{c as comp,o as data};
