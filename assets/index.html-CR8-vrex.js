import{_ as t,c as a,e as n,o as e}from"./app-D7KDYWdB.js";const p={};function o(r,s){return e(),a("div",null,[...s[0]||(s[0]=[n('<p>在Rust 中， 数字类型主要分为 <strong>整数类型</strong> 和 <strong>浮点类型。</strong></p><ul><li>类型定义的形式： <strong>有无符号</strong> + <strong>类型大小(位数)</strong></li><li><strong>无符号数</strong> 只能取正数， <strong>有符号数</strong> 既可以取正数也可以取负数</li></ul><h2 id="整数类型" tabindex="-1"><a class="header-anchor" href="#整数类型"><span>整数类型</span></a></h2><p>整数是指没有小数部分的数字。在Rust中，内置了如下的整数类型：</p><table><thead><tr><th>长度</th><th>有符号类型</th><th>无符号类型</th></tr></thead><tbody><tr><td>8位</td><td>i8</td><td>u8</td></tr><tr><td>16位</td><td>i16</td><td>u16</td></tr><tr><td>32位</td><td>i32</td><td>u32</td></tr><tr><td>64位</td><td>i64</td><td>u64</td></tr><tr><td>128位</td><td>i128</td><td>u128</td></tr><tr><td>视架构而定</td><td>isize</td><td>usize</td></tr></tbody></table><ul><li>每个有符号类型规定的数字，取值范围为 : <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">-(2^{n-1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{n-1} -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> ，其中 <code>n</code> 为位长度。 如 <code>i8</code> 可存储数字范围为 <strong>-128 ~ 127</strong></li><li>每个无符号类型规定的数字，取值范围为 0 ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7477em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> ，其中 <code>n</code> 为位长度。 如 <code>u8</code> 可存储数字范围为 <strong>0 ~ 255</strong></li><li><code>isize</code> 和 <code>usize</code> 取决于程序运行的计算机CPU类型：若CPU是 32位 的，则这两个类型的位数是 32位，同理，如CPU是64位，这两个类型位数为 64位</li><li>在Rust中，整型默认使用的类型是 <code>i32</code></li></ul><p><strong>整型字面量书写形式:</strong></p><table><thead><tr><th>数字字面量</th><th>示例</th></tr></thead><tbody><tr><td>十进制</td><td>95_232</td></tr><tr><td>十六进制</td><td>0xff</td></tr><tr><td>八进制</td><td>0o76</td></tr><tr><td>二进制</td><td>0b1111_0000</td></tr><tr><td>字节(仅限 u8)</td><td>b’A&#39;</td></tr></tbody></table><h3 id="整型溢出" tabindex="-1"><a class="header-anchor" href="#整型溢出"><span>整型溢出</span></a></h3><p>如果一个 <code>u8</code> 类型的变量，被修改为超过了 <strong>0 ~ 255</strong> 范围的值，比如 256， 那么就会发生 <strong>整型溢出</strong>。</p><ul><li>debug模式下，Rust在编译时， 会检查整型溢出，若存在这个问题，则会导致程序在编译时崩溃（panic)</li><li>release模式下，Rust在编译时，不检测溢出。当检查出溢出时，Rust 会按照补码循环溢出的规则处理：大于该类型最大值的数值会被补码转换成该类型能够支持的对应数字的最小值。比如在 <code>u8</code>的情况下，256 变成 0，257 变成 1，依此类推。 程序不会被 panic ，但是该变量的值可能不是期望的值。</li></ul><h2 id="浮点类型" tabindex="-1"><a class="header-anchor" href="#浮点类型"><span>浮点类型</span></a></h2><p><strong>浮点类型数字</strong> 即 带小数点的数字。</p><p>在 Rust 中，浮点类型有两种基本类型： <code>f32</code> 和 <code>f64</code> 。</p><p>浮点数根据 <code>IEEE-754</code> 标准实现。<code>f32</code> 类型是单精度浮点型，<code>f64</code> 为双精度。</p><h3 id="nan" tabindex="-1"><a class="header-anchor" href="#nan"><span>NaN</span></a></h3><p>对于数学上未定义的结果，例如对负数取平方根 <code>-42.1.sqrt()</code> ，会产生一个特殊的结果：Rust 的浮点数类型使用 <code>NaN</code> (not a number)来处理这些情况。</p><p><strong>所有跟 <code>NaN</code> 交互的操作，都会返回一个 <code>NaN</code> 。</strong></p><h2 id="序列" tabindex="-1"><a class="header-anchor" href="#序列"><span>序列</span></a></h2><p>Rust提供了一种简洁的方式，用于生成连续的数值：</p><p><code>1..5</code> 表示 生成 <code>1, 2, 3, 4</code> 的数字</p><p><code>1..=5</code> 表示 生成 <code>1, 2, 3, 4, 5</code> 的 数字。</p><p>序列只允许用于数字或字符类型，原因是：它们可以连续，同时编译器在编译期可以检查该序列是否为空， 字符和数字值是 Rust 中仅有的可以用于判断是否为空的类型。</p>',23)])])}const i=t(p,[["render",o]]),c=JSON.parse('{"path":"/learn-rust/number-type/","title":"数字类型","lang":"zh-CN","frontmatter":{"title":"数字类型","createTime":"2022/06/04 05:41:05","permalink":"/learn-rust/number-type/","description":"在Rust 中， 数字类型主要分为 整数类型 和 浮点类型。 类型定义的形式： 有无符号 + 类型大小(位数) 无符号数 只能取正数， 有符号数 既可以取正数也可以取负数 整数类型 整数是指没有小数部分的数字。在Rust中，内置了如下的整数类型： 每个有符号类型规定的数字，取值范围为 : −(2n−1) ~ 2n−1−1 ，其中 n 为位长度。 如 i...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数字类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-07T17:39:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pengzhanbo.cn/learn-rust/number-type/"}],["meta",{"property":"og:site_name","content":"鹏展博"}],["meta",{"property":"og:title","content":"数字类型"}],["meta",{"property":"og:description","content":"在Rust 中， 数字类型主要分为 整数类型 和 浮点类型。 类型定义的形式： 有无符号 + 类型大小(位数) 无符号数 只能取正数， 有符号数 既可以取正数也可以取负数 整数类型 整数是指没有小数部分的数字。在Rust中，内置了如下的整数类型： 每个有符号类型规定的数字，取值范围为 : −(2n−1) ~ 2n−1−1 ，其中 n 为位长度。 如 i..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-07T17:39:39.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-07T17:39:39.000Z"}]]},"readingTime":{"minutes":2.55,"words":766},"git":{"createdTime":1677713762000,"updatedTime":1759858779000,"contributors":[{"name":"pengzhanbo","username":"pengzhanbo","email":"volodymyr@foxmail.com","commits":8,"avatar":"https://avatars.githubusercontent.com/pengzhanbo?v=4","url":"https://github.com/pengzhanbo"}]},"autoDesc":true,"filePathRelative":"rust学习简记/基础入门/数字类型.md","headers":[]}');export{i as comp,c as data};
